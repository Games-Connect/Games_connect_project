<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__services__text_input_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__services__text_editing$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const io = dart_sdk.io;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var text_input = Object.create(dart.library);
  var autofill = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $contains = dartx.contains;
  var $keys = dartx.keys;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $any = dartx.any;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    TextInputConfigurationToMapOfString$dynamic: () => (T.TextInputConfigurationToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [text_input.TextInputConfiguration])))(),
    AutofillClientTobool: () => (T.AutofillClientTobool = dart.constFn(dart.fnType(core.bool, [autofill.AutofillClient])))(),
    AutofillClientToTextInputConfiguration: () => (T.AutofillClientToTextInputConfiguration = dart.constFn(dart.fnType(text_input.TextInputConfiguration, [autofill.AutofillClient])))()
=======
define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__events_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var events = Object.create(dart.library);
  var $leftShift = dartx['<<'];
  dart._checkModuleNullSafetyMode(true);
  var T = {
    DiagnosticsPropertyOfOffset: () => (T.DiagnosticsPropertyOfOffset = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Offset)))(),
    DiagnosticsPropertyOfDuration: () => (T.DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(core.Duration)))(),
    EnumPropertyOfPointerDeviceKind: () => (T.EnumPropertyOfPointerDeviceKind = dart.constFn(diagnostics.EnumProperty$(ui.PointerDeviceKind)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    PointerAddedEventN: () => (T.PointerAddedEventN = dart.constFn(dart.nullable(events.PointerAddedEvent)))(),
    PointerRemovedEventN: () => (T.PointerRemovedEventN = dart.constFn(dart.nullable(events.PointerRemovedEvent)))(),
    PointerHoverEventN: () => (T.PointerHoverEventN = dart.constFn(dart.nullable(events.PointerHoverEvent)))(),
    PointerEnterEventN: () => (T.PointerEnterEventN = dart.constFn(dart.nullable(events.PointerEnterEvent)))(),
    PointerExitEventN: () => (T.PointerExitEventN = dart.constFn(dart.nullable(events.PointerExitEvent)))(),
    PointerDownEventN: () => (T.PointerDownEventN = dart.constFn(dart.nullable(events.PointerDownEvent)))(),
    PointerMoveEventN: () => (T.PointerMoveEventN = dart.constFn(dart.nullable(events.PointerMoveEvent)))(),
    PointerUpEventN: () => (T.PointerUpEventN = dart.constFn(dart.nullable(events.PointerUpEvent)))(),
    PointerScrollEventN: () => (T.PointerScrollEventN = dart.constFn(dart.nullable(events.PointerScrollEvent)))(),
    PointerCancelEventN: () => (T.PointerCancelEventN = dart.constFn(dart.nullable(events.PointerCancelEvent)))()
>>>>>>> f328dd0bb65c1607d89f0ba7207434a99e478358
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.disabled",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_input.SmartDashesType.prototype,
        [_name$]: "SmartDashesType.enabled",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], text_input.SmartDashesType);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.disabled",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: text_input.SmartQuotesType.prototype,
        [_name$]: "SmartQuotesType.enabled",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], text_input.SmartQuotesType);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: false,
        [signed$]: false,
        [index$]: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 4
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 5
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 6
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 7
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 8
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [decimal$]: null,
        [signed$]: null,
        [index$]: 9
      });
    },
    get C16() {
      return C[16] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15], text_input.TextInputType);
    },
    get C17() {
      return C[17] = dart.constList(["text", "multiline", "number", "phone", "datetime", "emailAddress", "url", "visiblePassword", "name", "address"], core.String);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.none",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.unspecified",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.done",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.go",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.search",
        index: 4
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.send",
        index: 5
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.next",
        index: 6
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.previous",
        index: 7
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.continueAction",
        index: 8
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.join",
        index: 9
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.route",
        index: 10
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.emergencyCall",
        index: 11
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [_name$]: "TextInputAction.newline",
        index: 12
      });
    },
<<<<<<< HEAD
    get C31() {
      return C[31] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], text_input.TextInputAction);
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.words",
        index: 0
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.sentences",
        index: 1
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.characters",
        index: 2
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name$]: "TextCapitalization.none",
        index: 3
      });
    },
    get C36() {
      return C[36] = dart.constList([C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35], text_input.TextCapitalization);
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Start",
        index: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.Update",
        index: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [_name$]: "FloatingCursorDragState.End",
        index: 2
      });
    },
    get C41() {
      return C[41] = dart.constList([C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], text_input.FloatingCursorDragState);
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1,
        [TextSelection_isDirectional]: false,
        [TextSelection_affinity]: C[43] || CT.C43,
        [TextSelection_extentOffset]: -1,
        [TextSelection_baseOffset]: -1
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: ui.TextRange.prototype,
        [TextRange_end]: -1,
        [TextRange_start]: -1
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: text_input.TextEditingValue.prototype,
        [composing$]: C[44] || CT.C44,
        [selection$]: C[42] || CT.C42,
        [text$]: ""
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.tap",
        index: 0
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.doubleTap",
        index: 1
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.longPress",
        index: 2
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.forcePress",
        index: 3
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.keyboard",
        index: 4
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.toolBar",
        index: 5
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: text_input.SelectionChangedCause.prototype,
        [_name$]: "SelectionChangedCause.drag",
        index: 6
      });
    },
    get C53() {
      return C[53] = dart.constList([C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52], text_input.SelectionChangedCause);
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: -1
      });
    },
    get C55() {
      return C[55] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[25] || CT.C25, C[30] || CT.C30], text_input.TextInputAction);
    },
    get C56() {
      return C[56] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[23] || CT.C23, C[21] || CT.C21, C[22] || CT.C22, C[24] || CT.C24, C[30] || CT.C30, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29], text_input.TextInputAction);
    }
  }, false);
  var C = Array(57).fill(void 0);
  var I = [
    "package:flutter/src/services/text_input.dart",
    "file:///C:/flutter/sdk/flutter/packages/flutter/lib/src/services/text_input.dart",
    "package:flutter/src/services/autofill.dart",
    "file:///C:/flutter/sdk/flutter/packages/flutter/lib/src/services/autofill.dart"
  ];
  var _name$ = dart.privateName(text_input, "_name");
  text_input.SmartDashesType = class SmartDashesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartDashesType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartDashesType.prototype;
  dart.addTypeTests(text_input.SmartDashesType);
  dart.addTypeCaches(text_input.SmartDashesType);
  dart.setLibraryUri(text_input.SmartDashesType, I[0]);
  dart.setFieldSignature(text_input.SmartDashesType, () => ({
    __proto__: dart.getFields(text_input.SmartDashesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartDashesType, ['toString']);
  text_input.SmartDashesType.disabled = C[0] || CT.C0;
  text_input.SmartDashesType.enabled = C[1] || CT.C1;
  text_input.SmartDashesType.values = C[2] || CT.C2;
  text_input.SmartQuotesType = class SmartQuotesType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SmartQuotesType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SmartQuotesType.prototype;
  dart.addTypeTests(text_input.SmartQuotesType);
  dart.addTypeCaches(text_input.SmartQuotesType);
  dart.setLibraryUri(text_input.SmartQuotesType, I[0]);
  dart.setFieldSignature(text_input.SmartQuotesType, () => ({
    __proto__: dart.getFields(text_input.SmartQuotesType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SmartQuotesType, ['toString']);
  text_input.SmartQuotesType.disabled = C[3] || CT.C3;
  text_input.SmartQuotesType.enabled = C[4] || CT.C4;
  text_input.SmartQuotesType.values = C[5] || CT.C5;
  var index$ = dart.privateName(text_input, "TextInputType.index");
  var signed$ = dart.privateName(text_input, "TextInputType.signed");
  var decimal$ = dart.privateName(text_input, "TextInputType.decimal");
  text_input.TextInputType = class TextInputType extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get signed() {
      return this[signed$];
    }
    set signed(value) {
      super.signed = value;
    }
    get decimal() {
      return this[decimal$];
    }
    set decimal(value) {
      super.decimal = value;
    }
    get [_name$]() {
      return "TextInputType." + text_input.TextInputType._names[$_get](this.index);
    }
    toJson() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this[_name$], "signed", this.signed, "decimal", this.decimal]);
    }
    toString() {
      return object.objectRuntimeType(this, "TextInputType") + "(" + "name: " + this[_name$] + ", " + "signed: " + dart.str(this.signed) + ", " + "decimal: " + dart.str(this.decimal) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return text_input.TextInputType.is(other) && other.index === this.index && other.signed == this.signed && other.decimal == this.decimal;
    }
    get hashCode() {
      return ui.hashValues(this.index, this.signed, this.decimal);
    }
  };
  (text_input.TextInputType.__ = function(index) {
    this[index$] = index;
    this[signed$] = null;
    this[decimal$] = null;
    ;
  }).prototype = text_input.TextInputType.prototype;
  (text_input.TextInputType.numberWithOptions = function(opts) {
    let signed = opts && 'signed' in opts ? opts.signed : false;
    let decimal = opts && 'decimal' in opts ? opts.decimal : false;
    this[signed$] = signed;
    this[decimal$] = decimal;
    this[index$] = 2;
    ;
  }).prototype = text_input.TextInputType.prototype;
  dart.addTypeTests(text_input.TextInputType);
  dart.addTypeCaches(text_input.TextInputType);
  dart.setMethodSignature(text_input.TextInputType, () => ({
    __proto__: dart.getMethods(text_input.TextInputType.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(text_input.TextInputType, () => ({
    __proto__: dart.getGetters(text_input.TextInputType.__proto__),
    [_name$]: core.String
  }));
  dart.setLibraryUri(text_input.TextInputType, I[0]);
  dart.setFieldSignature(text_input.TextInputType, () => ({
    __proto__: dart.getFields(text_input.TextInputType.__proto__),
    index: dart.finalFieldType(core.int),
    signed: dart.finalFieldType(dart.nullable(core.bool)),
    decimal: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(text_input.TextInputType, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextInputType, ['hashCode']);
  dart.defineLazy(text_input.TextInputType, {
    /*text_input.TextInputType.text*/get text() {
      return C[6] || CT.C6;
    },
    /*text_input.TextInputType.multiline*/get multiline() {
      return C[7] || CT.C7;
    },
    /*text_input.TextInputType.number*/get number() {
      return C[8] || CT.C8;
    },
    /*text_input.TextInputType.phone*/get phone() {
      return C[9] || CT.C9;
    },
    /*text_input.TextInputType.datetime*/get datetime() {
      return C[10] || CT.C10;
    },
    /*text_input.TextInputType.emailAddress*/get emailAddress() {
      return C[11] || CT.C11;
    },
    /*text_input.TextInputType.url*/get url() {
      return C[12] || CT.C12;
    },
    /*text_input.TextInputType.visiblePassword*/get visiblePassword() {
      return C[13] || CT.C13;
    },
    /*text_input.TextInputType.name_*/get name_() {
      return C[14] || CT.C14;
    },
    /*text_input.TextInputType.streetAddress*/get streetAddress() {
      return C[15] || CT.C15;
    },
    /*text_input.TextInputType.values*/get values() {
      return C[16] || CT.C16;
    },
    /*text_input.TextInputType._names*/get _names() {
      return C[17] || CT.C17;
    }
  }, false);
  text_input.TextInputAction = class TextInputAction extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextInputAction.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextInputAction.prototype;
  dart.addTypeTests(text_input.TextInputAction);
  dart.addTypeCaches(text_input.TextInputAction);
  dart.setLibraryUri(text_input.TextInputAction, I[0]);
  dart.setFieldSignature(text_input.TextInputAction, () => ({
    __proto__: dart.getFields(text_input.TextInputAction.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextInputAction, ['toString']);
  text_input.TextInputAction.none = C[18] || CT.C18;
  text_input.TextInputAction.unspecified = C[19] || CT.C19;
  text_input.TextInputAction.done = C[20] || CT.C20;
  text_input.TextInputAction.go = C[21] || CT.C21;
  text_input.TextInputAction.search = C[22] || CT.C22;
  text_input.TextInputAction.send = C[23] || CT.C23;
  text_input.TextInputAction.next = C[24] || CT.C24;
  text_input.TextInputAction.previous = C[25] || CT.C25;
  text_input.TextInputAction.continueAction = C[26] || CT.C26;
  text_input.TextInputAction.join = C[27] || CT.C27;
  text_input.TextInputAction.route = C[28] || CT.C28;
  text_input.TextInputAction.emergencyCall = C[29] || CT.C29;
  text_input.TextInputAction.newline = C[30] || CT.C30;
  text_input.TextInputAction.values = C[31] || CT.C31;
  text_input.TextCapitalization = class TextCapitalization extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.TextCapitalization.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.TextCapitalization.prototype;
  dart.addTypeTests(text_input.TextCapitalization);
  dart.addTypeCaches(text_input.TextCapitalization);
  dart.setLibraryUri(text_input.TextCapitalization, I[0]);
  dart.setFieldSignature(text_input.TextCapitalization, () => ({
    __proto__: dart.getFields(text_input.TextCapitalization.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.TextCapitalization, ['toString']);
  text_input.TextCapitalization.words = C[32] || CT.C32;
  text_input.TextCapitalization.sentences = C[33] || CT.C33;
  text_input.TextCapitalization.characters = C[34] || CT.C34;
  text_input.TextCapitalization.none = C[35] || CT.C35;
  text_input.TextCapitalization.values = C[36] || CT.C36;
  var inputType$ = dart.privateName(text_input, "TextInputConfiguration.inputType");
  var readOnly$ = dart.privateName(text_input, "TextInputConfiguration.readOnly");
  var obscureText$ = dart.privateName(text_input, "TextInputConfiguration.obscureText");
  var autocorrect$ = dart.privateName(text_input, "TextInputConfiguration.autocorrect");
  var autofillConfiguration$ = dart.privateName(text_input, "TextInputConfiguration.autofillConfiguration");
  var smartDashesType$ = dart.privateName(text_input, "TextInputConfiguration.smartDashesType");
  var smartQuotesType$ = dart.privateName(text_input, "TextInputConfiguration.smartQuotesType");
  var enableSuggestions$ = dart.privateName(text_input, "TextInputConfiguration.enableSuggestions");
  var actionLabel$ = dart.privateName(text_input, "TextInputConfiguration.actionLabel");
  var inputAction$ = dart.privateName(text_input, "TextInputConfiguration.inputAction");
  var textCapitalization$ = dart.privateName(text_input, "TextInputConfiguration.textCapitalization");
  var keyboardAppearance$ = dart.privateName(text_input, "TextInputConfiguration.keyboardAppearance");
  var _name = dart.privateName(ui, "_name");
  text_input.TextInputConfiguration = class TextInputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
    get autocorrect() {
      return this[autocorrect$];
    }
    set autocorrect(value) {
      super.autocorrect = value;
    }
    get autofillConfiguration() {
      return this[autofillConfiguration$];
    }
    set autofillConfiguration(value) {
      super.autofillConfiguration = value;
    }
    get smartDashesType() {
      return this[smartDashesType$];
    }
    set smartDashesType(value) {
      super.smartDashesType = value;
    }
    get smartQuotesType() {
      return this[smartQuotesType$];
    }
    set smartQuotesType(value) {
      super.smartQuotesType = value;
    }
    get enableSuggestions() {
      return this[enableSuggestions$];
    }
    set enableSuggestions(value) {
      super.enableSuggestions = value;
    }
    get actionLabel() {
      return this[actionLabel$];
    }
    set actionLabel(value) {
      super.actionLabel = value;
    }
    get inputAction() {
      return this[inputAction$];
    }
    set inputAction(value) {
      super.inputAction = value;
    }
    get textCapitalization() {
      return this[textCapitalization$];
    }
    set textCapitalization(value) {
      super.textCapitalization = value;
    }
    get keyboardAppearance() {
      return this[keyboardAppearance$];
    }
    set keyboardAppearance(value) {
      super.keyboardAppearance = value;
    }
    toJson() {
      return (() => {
        let t0 = new (T.IdentityMapOfString$dynamic()).new();
        t0[$_set]("inputType", this.inputType.toJson());
        t0[$_set]("readOnly", this.readOnly);
        t0[$_set]("obscureText", this.obscureText);
        t0[$_set]("autocorrect", this.autocorrect);
        t0[$_set]("smartDashesType", this.smartDashesType.index[$toString]());
        t0[$_set]("smartQuotesType", this.smartQuotesType.index[$toString]());
        t0[$_set]("enableSuggestions", this.enableSuggestions);
        t0[$_set]("actionLabel", this.actionLabel);
        t0[$_set]("inputAction", this.inputAction.toString());
        t0[$_set]("textCapitalization", this.textCapitalization.toString());
        t0[$_set]("keyboardAppearance", this.keyboardAppearance.toString());
        if (this.autofillConfiguration != null) t0[$_set]("autofill", dart.nullCheck(this.autofillConfiguration).toJson());
        return t0;
      })();
    }
  };
  (text_input.TextInputConfiguration.new = function(opts) {
    let t0, t0$;
    let inputType = opts && 'inputType' in opts ? opts.inputType : C[6] || CT.C6;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    let actionLabel = opts && 'actionLabel' in opts ? opts.actionLabel : null;
    let inputAction = opts && 'inputAction' in opts ? opts.inputAction : C[20] || CT.C20;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : C[37] || CT.C37;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[35] || CT.C35;
    let autofillConfiguration = opts && 'autofillConfiguration' in opts ? opts.autofillConfiguration : null;
    this[inputType$] = inputType;
    this[readOnly$] = readOnly;
    this[obscureText$] = obscureText;
    this[autocorrect$] = autocorrect;
    this[enableSuggestions$] = enableSuggestions;
    this[actionLabel$] = actionLabel;
    this[inputAction$] = inputAction;
    this[keyboardAppearance$] = keyboardAppearance;
    this[textCapitalization$] = textCapitalization;
    this[autofillConfiguration$] = autofillConfiguration;
    if (!(inputType !== null)) dart.assertFailed(null, I[1], 466, 15, "inputType != null");
    if (!(obscureText !== null)) dart.assertFailed(null, I[1], 467, 15, "obscureText != null");
    this[smartDashesType$] = (t0 = smartDashesType, t0 == null ? obscureText ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0);
    this[smartQuotesType$] = (t0$ = smartQuotesType, t0$ == null ? obscureText ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$);
    if (!(autocorrect !== null)) dart.assertFailed(null, I[1], 470, 15, "autocorrect != null");
    if (!(enableSuggestions !== null)) dart.assertFailed(null, I[1], 471, 15, "enableSuggestions != null");
    if (!(keyboardAppearance !== null)) dart.assertFailed(null, I[1], 472, 15, "keyboardAppearance != null");
    if (!(inputAction !== null)) dart.assertFailed(null, I[1], 473, 15, "inputAction != null");
    if (!(textCapitalization !== null)) dart.assertFailed(null, I[1], 474, 15, "textCapitalization != null");
    ;
  }).prototype = text_input.TextInputConfiguration.prototype;
  dart.addTypeTests(text_input.TextInputConfiguration);
  dart.addTypeCaches(text_input.TextInputConfiguration);
  dart.setMethodSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getMethods(text_input.TextInputConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(text_input.TextInputConfiguration, I[0]);
  dart.setFieldSignature(text_input.TextInputConfiguration, () => ({
    __proto__: dart.getFields(text_input.TextInputConfiguration.__proto__),
    inputType: dart.finalFieldType(text_input.TextInputType),
    readOnly: dart.finalFieldType(core.bool),
    obscureText: dart.finalFieldType(core.bool),
    autocorrect: dart.finalFieldType(core.bool),
    autofillConfiguration: dart.finalFieldType(dart.nullable(autofill.AutofillConfiguration)),
    smartDashesType: dart.finalFieldType(text_input.SmartDashesType),
    smartQuotesType: dart.finalFieldType(text_input.SmartQuotesType),
    enableSuggestions: dart.finalFieldType(core.bool),
    actionLabel: dart.finalFieldType(dart.nullable(core.String)),
    inputAction: dart.finalFieldType(text_input.TextInputAction),
    textCapitalization: dart.finalFieldType(text_input.TextCapitalization),
    keyboardAppearance: dart.finalFieldType(ui.Brightness)
  }));
  text_input.FloatingCursorDragState = class FloatingCursorDragState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.FloatingCursorDragState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.FloatingCursorDragState.prototype;
  dart.addTypeTests(text_input.FloatingCursorDragState);
  dart.addTypeCaches(text_input.FloatingCursorDragState);
  dart.setLibraryUri(text_input.FloatingCursorDragState, I[0]);
  dart.setFieldSignature(text_input.FloatingCursorDragState, () => ({
    __proto__: dart.getFields(text_input.FloatingCursorDragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.FloatingCursorDragState, ['toString']);
  text_input.FloatingCursorDragState.Start = C[38] || CT.C38;
  text_input.FloatingCursorDragState.Update = C[39] || CT.C39;
  text_input.FloatingCursorDragState.End = C[40] || CT.C40;
  text_input.FloatingCursorDragState.values = C[41] || CT.C41;
  var offset$ = dart.privateName(text_input, "RawFloatingCursorPoint.offset");
  var state$ = dart.privateName(text_input, "RawFloatingCursorPoint.state");
  text_input.RawFloatingCursorPoint = class RawFloatingCursorPoint extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
  };
  (text_input.RawFloatingCursorPoint.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[offset$] = offset;
    this[state$] = state;
    if (!(state !== null)) dart.assertFailed(null, I[1], 643, 15, "state != null");
    if (!(state !== text_input.FloatingCursorDragState.Update || offset != null)) dart.assertFailed(null, I[1], 644, 15, "state != FloatingCursorDragState.Update || offset != null");
    ;
  }).prototype = text_input.RawFloatingCursorPoint.prototype;
  dart.addTypeTests(text_input.RawFloatingCursorPoint);
  dart.addTypeCaches(text_input.RawFloatingCursorPoint);
  dart.setLibraryUri(text_input.RawFloatingCursorPoint, I[0]);
  dart.setFieldSignature(text_input.RawFloatingCursorPoint, () => ({
    __proto__: dart.getFields(text_input.RawFloatingCursorPoint.__proto__),
    offset: dart.finalFieldType(dart.nullable(ui.Offset)),
    state: dart.finalFieldType(text_input.FloatingCursorDragState)
  }));
  var text$ = dart.privateName(text_input, "TextEditingValue.text");
  var selection$ = dart.privateName(text_input, "TextEditingValue.selection");
  var composing$ = dart.privateName(text_input, "TextEditingValue.composing");
  var TextRange_end = dart.privateName(ui, "TextRange.end");
  var TextRange_start = dart.privateName(ui, "TextRange.start");
  var TextSelection_isDirectional = dart.privateName(text_editing, "TextSelection.isDirectional");
  var TextSelection_affinity = dart.privateName(text_editing, "TextSelection.affinity");
  var TextSelection_extentOffset = dart.privateName(text_editing, "TextSelection.extentOffset");
  var TextSelection_baseOffset = dart.privateName(text_editing, "TextSelection.baseOffset");
  text_input.TextEditingValue = class TextEditingValue extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get selection() {
      return this[selection$];
    }
    set selection(value) {
      super.selection = value;
    }
    get composing() {
      return this[composing$];
    }
    set composing(value) {
      super.composing = value;
    }
    static fromJSON(encoded) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      return new text_input.TextEditingValue.new({text: core.String.as(encoded[$_get]("text")), selection: new text_editing.TextSelection.new({baseOffset: (t1 = T.intN().as(encoded[$_get]("selectionBase")), t1 == null ? -1 : t1), extentOffset: (t1$ = T.intN().as(encoded[$_get]("selectionExtent")), t1$ == null ? -1 : t1$), affinity: (t1$0 = text_input._toTextAffinity(T.StringN().as(encoded[$_get]("selectionAffinity"))), t1$0 == null ? ui.TextAffinity.downstream : t1$0), isDirectional: (t1$1 = T.boolN().as(encoded[$_get]("selectionIsDirectional")), t1$1 == null ? false : t1$1)}), composing: new ui.TextRange.new({start: (t1$2 = T.intN().as(encoded[$_get]("composingBase")), t1$2 == null ? -1 : t1$2), end: (t1$3 = T.intN().as(encoded[$_get]("composingExtent")), t1$3 == null ? -1 : t1$3)})});
    }
    toJSON() {
      return new (T.IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.selection.baseOffset, "selectionExtent", this.selection.extentOffset, "selectionAffinity", this.selection.affinity.toString(), "selectionIsDirectional", this.selection.isDirectional, "composingBase", this.composing.start, "composingExtent", this.composing.end]);
    }
    copyWith(opts) {
      let t1, t1$, t1$0;
      let text = opts && 'text' in opts ? opts.text : null;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let composing = opts && 'composing' in opts ? opts.composing : null;
      return new text_input.TextEditingValue.new({text: (t1 = text, t1 == null ? this.text : t1), selection: (t1$ = selection, t1$ == null ? this.selection : t1$), composing: (t1$0 = composing, t1$0 == null ? this.composing : t1$0)});
    }
    get isComposingRangeValid() {
      return this.composing.isValid && this.composing.isNormalized && this.composing.end <= this.text.length;
    }
    toString() {
      return object.objectRuntimeType(this, "TextEditingValue") + "(text: ┤" + this.text + "├, selection: " + dart.str(this.selection) + ", composing: " + dart.str(this.composing) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return text_input.TextEditingValue.is(other) && other.text === this.text && other.selection._equals(this.selection) && other.composing._equals(this.composing);
    }
    get hashCode() {
      return ui.hashValues(this.text[$hashCode], this.selection.hashCode, this.composing.hashCode);
    }
  };
  (text_input.TextEditingValue.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : "";
    let selection = opts && 'selection' in opts ? opts.selection : C[42] || CT.C42;
    let composing = opts && 'composing' in opts ? opts.composing : C[44] || CT.C44;
    this[text$] = text;
    this[selection$] = selection;
    this[composing$] = composing;
    if (!(text !== null)) dart.assertFailed(null, I[1], 666, 15, "text != null");
    if (!(selection !== null)) dart.assertFailed(null, I[1], 667, 15, "selection != null");
    if (!(composing !== null)) dart.assertFailed(null, I[1], 668, 15, "composing != null");
    ;
  }).prototype = text_input.TextEditingValue.prototype;
  dart.addTypeTests(text_input.TextEditingValue);
  dart.addTypeCaches(text_input.TextEditingValue);
  dart.setMethodSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getMethods(text_input.TextEditingValue.__proto__),
    toJSON: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(text_input.TextEditingValue, [], {composing: dart.nullable(ui.TextRange), selection: dart.nullable(text_editing.TextSelection), text: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getGetters(text_input.TextEditingValue.__proto__),
    isComposingRangeValid: core.bool
  }));
  dart.setLibraryUri(text_input.TextEditingValue, I[0]);
  dart.setFieldSignature(text_input.TextEditingValue, () => ({
    __proto__: dart.getFields(text_input.TextEditingValue.__proto__),
    text: dart.finalFieldType(core.String),
    selection: dart.finalFieldType(text_editing.TextSelection),
    composing: dart.finalFieldType(ui.TextRange)
  }));
  dart.defineExtensionMethods(text_input.TextEditingValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_input.TextEditingValue, ['hashCode']);
  dart.defineLazy(text_input.TextEditingValue, {
    /*text_input.TextEditingValue.empty*/get empty() {
      return C[45] || CT.C45;
    }
  }, false);
  text_input.SelectionChangedCause = class SelectionChangedCause extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_input.SelectionChangedCause.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_input.SelectionChangedCause.prototype;
  dart.addTypeTests(text_input.SelectionChangedCause);
  dart.addTypeCaches(text_input.SelectionChangedCause);
  dart.setLibraryUri(text_input.SelectionChangedCause, I[0]);
  dart.setFieldSignature(text_input.SelectionChangedCause, () => ({
    __proto__: dart.getFields(text_input.SelectionChangedCause.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_input.SelectionChangedCause, ['toString']);
  text_input.SelectionChangedCause.tap = C[46] || CT.C46;
  text_input.SelectionChangedCause.doubleTap = C[47] || CT.C47;
  text_input.SelectionChangedCause.longPress = C[48] || CT.C48;
  text_input.SelectionChangedCause.forcePress = C[49] || CT.C49;
  text_input.SelectionChangedCause.keyboard = C[50] || CT.C50;
  text_input.SelectionChangedCause.toolBar = C[51] || CT.C51;
  text_input.SelectionChangedCause.drag = C[52] || CT.C52;
  text_input.SelectionChangedCause.values = C[53] || CT.C53;
  text_input.TextSelectionDelegate = class TextSelectionDelegate extends core.Object {};
  text_input.TextSelectionDelegate[dart.mixinOn] = Object => class TextSelectionDelegate extends Object {
    set textEditingValue(value) {
    }
    get cutEnabled() {
      return true;
    }
    get copyEnabled() {
      return true;
    }
    get pasteEnabled() {
      return true;
    }
    get selectAllEnabled() {
      return true;
    }
  };
  (text_input.TextSelectionDelegate[dart.mixinNew] = function() {
  }).prototype = text_input.TextSelectionDelegate.prototype;
  dart.addTypeTests(text_input.TextSelectionDelegate);
  dart.addTypeCaches(text_input.TextSelectionDelegate);
  text_input.TextSelectionDelegate[dart.implements] = () => [core.Object];
  dart.setGetterSignature(text_input.TextSelectionDelegate, () => ({
    __proto__: dart.getGetters(text_input.TextSelectionDelegate.__proto__),
    cutEnabled: core.bool,
    copyEnabled: core.bool,
    pasteEnabled: core.bool,
    selectAllEnabled: core.bool
  }));
  dart.setSetterSignature(text_input.TextSelectionDelegate, () => ({
    __proto__: dart.getSetters(text_input.TextSelectionDelegate.__proto__),
    textEditingValue: text_input.TextEditingValue
  }));
  dart.setLibraryUri(text_input.TextSelectionDelegate, I[0]);
  text_input.TextInputClient = class TextInputClient extends core.Object {};
  (text_input.TextInputClient.new = function() {
    ;
  }).prototype = text_input.TextInputClient.prototype;
  dart.addTypeTests(text_input.TextInputClient);
  dart.addTypeCaches(text_input.TextInputClient);
  dart.setLibraryUri(text_input.TextInputClient, I[0]);
  var _cachedSize = dart.privateName(text_input, "_cachedSize");
  var _cachedTransform = dart.privateName(text_input, "_cachedTransform");
  var _cachedRect = dart.privateName(text_input, "_cachedRect");
  var _cachedCaretRect = dart.privateName(text_input, "_cachedCaretRect");
  var _client$ = dart.privateName(text_input, "_client");
  var _id = dart.privateName(text_input, "_id");
  var _currentConnection = dart.privateName(text_input, "_currentConnection");
  var _show = dart.privateName(text_input, "_show");
  var _requestAutofill = dart.privateName(text_input, "_requestAutofill");
  var _updateConfig = dart.privateName(text_input, "_updateConfig");
  var _setEditingState = dart.privateName(text_input, "_setEditingState");
  var _setEditableSizeAndTransform = dart.privateName(text_input, "_setEditableSizeAndTransform");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _setComposingTextRect = dart.privateName(text_input, "_setComposingTextRect");
  var _setCaretRect = dart.privateName(text_input, "_setCaretRect");
  var _setStyle = dart.privateName(text_input, "_setStyle");
  var _clearClient = dart.privateName(text_input, "_clearClient");
  text_input.TextInputConnection = class TextInputConnection extends core.Object {
    static debugResetId(opts) {
      let to = opts && 'to' in opts ? opts.to : 1;
      if (!(to !== null)) dart.assertFailed(null, I[1], 940, 12, "to != null");
      if (!dart.fn(() => {
        text_input.TextInputConnection._nextId = to;
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 941, 12, "() {\r\n      _nextId = to;\r\n      return true;\r\n    }()");
    }
    get attached() {
      return dart.equals(text_input.TextInput._instance[_currentConnection], this);
    }
    show() {
      if (!this.attached) dart.assertFailed(null, I[1], 954, 12, "attached");
      text_input.TextInput._instance[_show]();
    }
    requestAutofill() {
      if (!this.attached) dart.assertFailed(null, I[1], 967, 12, "attached");
      text_input.TextInput._instance[_requestAutofill]();
    }
    updateConfig(configuration) {
      if (!this.attached) dart.assertFailed(null, I[1], 974, 12, "attached");
      text_input.TextInput._instance[_updateConfig](configuration);
    }
    setEditingState(value) {
      if (!this.attached) dart.assertFailed(null, I[1], 981, 12, "attached");
      text_input.TextInput._instance[_setEditingState](value);
    }
    setEditableSizeAndTransform(editableBoxSize, transform) {
      if (!editableBoxSize._equals(this[_cachedSize]) || !transform._equals(this[_cachedTransform])) {
        this[_cachedSize] = editableBoxSize;
        this[_cachedTransform] = transform;
        text_input.TextInput._instance[_setEditableSizeAndTransform](new (T.IdentityMapOfString$dynamic()).from(["width", editableBoxSize.width, "height", editableBoxSize.height, "transform", transform.storage]));
      }
    }
    setComposingRect(rect) {
      if (!(rect !== null)) dart.assertFailed(null, I[1], 1017, 12, "rect != null");
      if (rect._equals(this[_cachedRect])) return;
      this[_cachedRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[54] || CT.C54);
      text_input.TextInput._instance[_setComposingTextRect](new (T.IdentityMapOfString$dynamic()).from(["width", validRect.width, "height", validRect.height, "x", validRect.left, "y", validRect.top]));
    }
    setCaretRect(rect) {
      if (!(rect !== null)) dart.assertFailed(null, I[1], 1035, 12, "rect != null");
      if (rect._equals(this[_cachedCaretRect])) return;
      this[_cachedCaretRect] = rect;
      let validRect = rect.isFinite ? rect : ui.Offset.zero['&'](C[54] || CT.C54);
      text_input.TextInput._instance[_setCaretRect](new (T.IdentityMapOfString$dynamic()).from(["width", validRect.width, "height", validRect.height, "x", validRect.left, "y", validRect.top]));
    }
    setStyle(opts) {
      let t1;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      if (!this.attached) dart.assertFailed(null, I[1], 1062, 12, "attached");
      text_input.TextInput._instance[_setStyle](new (T.IdentityMapOfString$dynamic()).from(["fontFamily", fontFamily, "fontSize", fontSize, "fontWeightIndex", (t1 = fontWeight, t1 == null ? null : t1.index), "textAlignIndex", textAlign.index, "textDirectionIndex", textDirection.index]));
    }
    close() {
      if (this.attached) {
        text_input.TextInput._instance[_clearClient]();
      }
      if (!!this.attached) dart.assertFailed(null, I[1], 1083, 12, "!attached");
    }
    connectionClosedReceived() {
      text_input.TextInput._instance[_currentConnection] = null;
      if (!!this.attached) dart.assertFailed(null, I[1], 1091, 12, "!attached");
    }
  };
  (text_input.TextInputConnection.__ = function(_client) {
    let t1;
    this[_cachedSize] = null;
    this[_cachedTransform] = null;
    this[_cachedRect] = null;
    this[_cachedCaretRect] = null;
    this[_client$] = _client;
    if (!(_client !== null)) dart.assertFailed(null, I[1], 923, 16, "_client != null");
    this[_id] = (t1 = text_input.TextInputConnection._nextId, text_input.TextInputConnection._nextId = dart.notNull(t1) + 1, t1);
    ;
  }).prototype = text_input.TextInputConnection.prototype;
  dart.addTypeTests(text_input.TextInputConnection);
  dart.addTypeCaches(text_input.TextInputConnection);
  dart.setMethodSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getMethods(text_input.TextInputConnection.__proto__),
    show: dart.fnType(dart.void, []),
    requestAutofill: dart.fnType(dart.void, []),
    updateConfig: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    setEditingState: dart.fnType(dart.void, [text_input.TextEditingValue]),
    setEditableSizeAndTransform: dart.fnType(dart.void, [ui.Size, vector_math_64.Matrix4]),
    setComposingRect: dart.fnType(dart.void, [ui.Rect]),
    setCaretRect: dart.fnType(dart.void, [ui.Rect]),
    setStyle: dart.fnType(dart.void, [], {}, {fontFamily: dart.nullable(core.String), fontSize: dart.nullable(core.double), fontWeight: dart.nullable(ui.FontWeight), textAlign: ui.TextAlign, textDirection: ui.TextDirection}),
    close: dart.fnType(dart.void, []),
    connectionClosedReceived: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getGetters(text_input.TextInputConnection.__proto__),
    attached: core.bool
  }));
  dart.setLibraryUri(text_input.TextInputConnection, I[0]);
  dart.setFieldSignature(text_input.TextInputConnection, () => ({
    __proto__: dart.getFields(text_input.TextInputConnection.__proto__),
    [_cachedSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_cachedTransform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4)),
    [_cachedRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_cachedCaretRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_id]: dart.finalFieldType(core.int),
    [_client$]: dart.finalFieldType(text_input.TextInputClient)
  }));
  dart.defineLazy(text_input.TextInputConnection, {
    /*text_input.TextInputConnection._nextId*/get _nextId() {
      return 1;
    },
    set _nextId(_) {}
  }, false);
  var __TextInput__channel = dart.privateName(text_input, "_#TextInput#_channel");
  var __TextInput__currentConfiguration = dart.privateName(text_input, "_#TextInput#_currentConfiguration");
  var _hidePending = dart.privateName(text_input, "_hidePending");
  var _channel = dart.privateName(text_input, "_channel");
  var _handleTextInputInvocation = dart.privateName(text_input, "_handleTextInputInvocation");
  var _attach = dart.privateName(text_input, "_attach");
  var _currentConfiguration = dart.privateName(text_input, "_currentConfiguration");
  var _scheduleHide = dart.privateName(text_input, "_scheduleHide");
  text_input.TextInput = class TextInput extends core.Object {
    static setChannel(newChannel) {
      if (!dart.fn(() => {
        let t1;
        text_input.TextInput._instance[_channel] = (t1 = newChannel, (() => {
          t1.setMethodCallHandler(dart.bind(text_input.TextInput._instance, _handleTextInputInvocation));
          return t1;
        })());
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1216, 12, "() {\r\n      _instance._channel = newChannel..setMethodCallHandler(_instance._handleTextInputInvocation);\r\n      return true;\r\n    }()");
    }
    static attach(client, configuration) {
      if (!(client !== null)) dart.assertFailed(null, I[1], 1261, 12, "client != null");
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1262, 12, "configuration != null");
      let connection = new text_input.TextInputConnection.__(client);
      text_input.TextInput._instance[_attach](connection, configuration);
      return connection;
    }
    [_attach](connection, configuration) {
      if (!(connection !== null)) dart.assertFailed(null, I[1], 1272, 12, "connection != null");
      if (!(connection[_client$] !== null)) dart.assertFailed(null, I[1], 1273, 12, "connection._client != null");
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1274, 12, "configuration != null");
      if (!text_input.TextInput._debugEnsureInputActionWorksOnPlatform(configuration.inputAction)) dart.assertFailed(null, I[1], 1275, 12, "_debugEnsureInputActionWorksOnPlatform(configuration.inputAction)");
      this[_channel].invokeMethod(dart.void, "TextInput.setClient", [connection[_id], configuration.toJson()]);
      this[_currentConnection] = connection;
      this[_currentConfiguration] = configuration;
    }
    static _debugEnsureInputActionWorksOnPlatform(inputAction) {
      if (!dart.fn(() => {
        if (true) {
          return true;
        }
        if (io.Platform.isIOS) {
          if (!text_input.TextInput._iOSSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on iOS.", I[1], 1292, 11, "_iOSSupportedInputActions.contains(inputAction)");
        } else if (io.Platform.isAndroid) {
          if (!text_input.TextInput._androidSupportedInputActions[$contains](inputAction)) dart.assertFailed("The requested TextInputAction \"" + dart.str(inputAction) + "\" is not supported on Android.", I[1], 1297, 11, "_androidSupportedInputActions.contains(inputAction)");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 1285, 12, "() {\r\n      if (kIsWeb) {\r\n        // TODO(flutterweb): what makes sense here?\r\n        return true;\r\n      }\r\n      if (Platform.isIOS) {\r\n        assert(\r\n          _iOSSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on iOS.',\r\n        );\r\n      } else if (Platform.isAndroid) {\r\n        assert(\r\n          _androidSupportedInputActions.contains(inputAction),\r\n          'The requested TextInputAction \"$inputAction\" is not supported on Android.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    get [_channel]() {
      let t1;
      t1 = this[__TextInput__channel];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_channel")) : t1;
    }
    set [_channel](t1) {
      this[__TextInput__channel] = t1;
    }
    get [_currentConfiguration]() {
      let t2;
      t2 = this[__TextInput__currentConfiguration];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_currentConfiguration")) : t2;
    }
    set [_currentConfiguration](t2) {
      this[__TextInput__currentConfiguration] = t2;
    }
    [_handleTextInputInvocation](methodCall) {
      return async.async(dart.dynamic, (function* _handleTextInputInvocation() {
        let t4, t3;
        if (this[_currentConnection] == null) return;
        let method = methodCall.method;
        if (method === "TextInputClient.requestExistingInputState") {
          if (!(dart.nullCheck(this[_currentConnection])[_client$] !== null)) dart.assertFailed(null, I[1], 1319, 14, "_currentConnection!._client != null");
          this[_attach](dart.nullCheck(this[_currentConnection]), this[_currentConfiguration]);
          let editingValue = dart.nullCheck(this[_currentConnection])[_client$].currentTextEditingValue;
          if (editingValue != null) {
            this[_setEditingState](editingValue);
          }
          return;
        }
        let args = core.List.as(methodCall.arguments);
        if (method === "TextInputClient.updateEditingStateWithTag") {
          let client = dart.nullCheck(this[_currentConnection])[_client$];
          if (!(client !== null)) dart.assertFailed(null, I[1], 1332, 14, "client != null");
          let scope = client.currentAutofillScope;
          let editingValue = T.MapOfString$dynamic().as(args[$_get](1));
          for (let tag of editingValue[$keys]) {
            let textEditingValue = text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(editingValue[$_get](tag)));
            t3 = scope;
            t3 == null ? null : (t4 = t3.getAutofillClient(tag), t4 == null ? null : t4.updateEditingValue(textEditingValue));
          }
          return;
        }
        let client = core.int.as(args[$_get](0));
        if (client !== dart.nullCheck(this[_currentConnection])[_id]) return;
        switch (method) {
          case "TextInputClient.updateEditingState":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateEditingValue(text_input.TextEditingValue.fromJSON(T.MapOfString$dynamic().as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performAction":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performAction(text_input._toTextInputAction(core.String.as(args[$_get](1))));
            break;
          }
          case "TextInputClient.performPrivateCommand":
          {
            dart.nullCheck(this[_currentConnection])[_client$].performPrivateCommand(core.String.as(dart.dsend(args[$_get](1), '_get', ["action"])), T.MapOfString$dynamic().as(dart.dsend(args[$_get](1), '_get', ["data"])));
            break;
          }
          case "TextInputClient.updateFloatingCursor":
          {
            dart.nullCheck(this[_currentConnection])[_client$].updateFloatingCursor(text_input._toTextPoint(text_input._toTextCursorAction(core.String.as(args[$_get](1))), T.MapOfString$dynamic().as(args[$_get](2))));
            break;
          }
          case "TextInputClient.onConnectionClosed":
          {
            dart.nullCheck(this[_currentConnection])[_client$].connectionClosed();
            break;
          }
          case "TextInputClient.showAutocorrectionPromptRect":
          {
            dart.nullCheck(this[_currentConnection])[_client$].showAutocorrectionPromptRect(core.int.as(args[$_get](1)), core.int.as(args[$_get](2)));
            break;
          }
          default:
          {
            dart.throw(new message_codec.MissingPluginException.new());
          }
        }
      }).bind(this));
    }
    [_scheduleHide]() {
      if (this[_hidePending]) return;
      this[_hidePending] = true;
      async.scheduleMicrotask(dart.fn(() => {
        this[_hidePending] = false;
        if (this[_currentConnection] == null) this[_channel].invokeMethod(dart.void, "TextInput.hide");
      }, T.VoidTovoid()));
    }
    [_clearClient]() {
      this[_channel].invokeMethod(dart.void, "TextInput.clearClient");
      this[_currentConnection] = null;
      this[_scheduleHide]();
    }
    [_updateConfig](configuration) {
      if (!(configuration !== null)) dart.assertFailed(null, I[1], 1402, 12, "configuration != null");
      this[_channel].invokeMethod(dart.void, "TextInput.updateConfig", configuration.toJson());
    }
    [_setEditingState](value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 1410, 12, "value != null");
      this[_channel].invokeMethod(dart.void, "TextInput.setEditingState", value.toJSON());
    }
    [_show]() {
      this[_channel].invokeMethod(dart.void, "TextInput.show");
    }
    [_requestAutofill]() {
      this[_channel].invokeMethod(dart.void, "TextInput.requestAutofill");
    }
    [_setEditableSizeAndTransform](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setEditableSizeAndTransform", args);
    }
    [_setComposingTextRect](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setMarkedTextRect", args);
    }
    [_setCaretRect](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setCaretRect", args);
    }
    [_setStyle](args) {
      this[_channel].invokeMethod(dart.void, "TextInput.setStyle", args);
    }
    static finishAutofillContext(opts) {
      let shouldSave = opts && 'shouldSave' in opts ? opts.shouldSave : true;
      if (!(shouldSave !== null)) dart.assertFailed(null, I[1], 1502, 12, "shouldSave != null");
      text_input.TextInput._instance[_channel].invokeMethod(dart.void, "TextInput.finishAutofillContext", shouldSave);
    }
  };
  (text_input.TextInput.__ = function() {
    this[__TextInput__channel] = null;
    this[_currentConnection] = null;
    this[__TextInput__currentConfiguration] = null;
    this[_hidePending] = false;
    this[_channel] = system_channels.SystemChannels.textInput;
    this[_channel].setMethodCallHandler(dart.bind(this, _handleTextInputInvocation));
  }).prototype = text_input.TextInput.prototype;
  dart.addTypeTests(text_input.TextInput);
  dart.addTypeCaches(text_input.TextInput);
  dart.setMethodSignature(text_input.TextInput, () => ({
    __proto__: dart.getMethods(text_input.TextInput.__proto__),
    [_attach]: dart.fnType(dart.void, [text_input.TextInputConnection, text_input.TextInputConfiguration]),
    [_handleTextInputInvocation]: dart.fnType(async.Future, [message_codec.MethodCall]),
    [_scheduleHide]: dart.fnType(dart.void, []),
    [_clearClient]: dart.fnType(dart.void, []),
    [_updateConfig]: dart.fnType(dart.void, [text_input.TextInputConfiguration]),
    [_setEditingState]: dart.fnType(dart.void, [text_input.TextEditingValue]),
    [_show]: dart.fnType(dart.void, []),
    [_requestAutofill]: dart.fnType(dart.void, []),
    [_setEditableSizeAndTransform]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setComposingTextRect]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setCaretRect]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setStyle]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setGetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getGetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setSetterSignature(text_input.TextInput, () => ({
    __proto__: dart.getSetters(text_input.TextInput.__proto__),
    [_channel]: platform_channel.MethodChannel,
    [_currentConfiguration]: text_input.TextInputConfiguration
  }));
  dart.setLibraryUri(text_input.TextInput, I[0]);
  dart.setFieldSignature(text_input.TextInput, () => ({
    __proto__: dart.getFields(text_input.TextInput.__proto__),
    [__TextInput__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [_currentConnection]: dart.fieldType(dart.nullable(text_input.TextInputConnection)),
    [__TextInput__currentConfiguration]: dart.fieldType(dart.nullable(text_input.TextInputConfiguration)),
    [_hidePending]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text_input.TextInput, {
    /*text_input.TextInput._instance*/get _instance() {
      return new text_input.TextInput.__();
    },
    /*text_input.TextInput._androidSupportedInputActions*/get _androidSupportedInputActions() {
      return C[55] || CT.C55;
    },
    /*text_input.TextInput._iOSSupportedInputActions*/get _iOSSupportedInputActions() {
      return C[56] || CT.C56;
    }
  }, false);
  text_input._toTextAffinity = function _toTextAffinity(affinity) {
    switch (affinity) {
      case "TextAffinity.downstream":
      {
        return ui.TextAffinity.downstream;
      }
      case "TextAffinity.upstream":
      {
        return ui.TextAffinity.upstream;
      }
    }
    return null;
  };
  text_input._toTextInputAction = function _toTextInputAction(action) {
    switch (action) {
      case "TextInputAction.none":
      {
        return text_input.TextInputAction.none;
      }
      case "TextInputAction.unspecified":
      {
        return text_input.TextInputAction.unspecified;
      }
      case "TextInputAction.go":
      {
        return text_input.TextInputAction.go;
      }
      case "TextInputAction.search":
      {
        return text_input.TextInputAction.search;
      }
      case "TextInputAction.send":
      {
        return text_input.TextInputAction.send;
      }
      case "TextInputAction.next":
      {
        return text_input.TextInputAction.next;
      }
      case "TextInputAction.previous":
      {
        return text_input.TextInputAction.previous;
      }
      case "TextInputAction.continue_action":
      {
        return text_input.TextInputAction.continueAction;
      }
      case "TextInputAction.join":
      {
        return text_input.TextInputAction.join;
      }
      case "TextInputAction.route":
      {
        return text_input.TextInputAction.route;
      }
      case "TextInputAction.emergencyCall":
      {
        return text_input.TextInputAction.emergencyCall;
      }
      case "TextInputAction.done":
      {
        return text_input.TextInputAction.done;
      }
      case "TextInputAction.newline":
      {
        return text_input.TextInputAction.newline;
      }
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text input action: " + action)])));
  };
  text_input._toTextCursorAction = function _toTextCursorAction(state) {
    switch (state) {
      case "FloatingCursorDragState.start":
      {
        return text_input.FloatingCursorDragState.Start;
      }
      case "FloatingCursorDragState.update":
      {
        return text_input.FloatingCursorDragState.Update;
      }
      case "FloatingCursorDragState.end":
      {
        return text_input.FloatingCursorDragState.End;
      }
    }
    dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unknown text cursor action: " + state)])));
  };
  text_input._toTextPoint = function _toTextPoint(state, encoded) {
    if (!(state !== null)) dart.assertFailed("You must provide a state to set a new editing point.", I[1], 1140, 10, "state != null");
    if (!(encoded[$_get]("X") != null)) dart.assertFailed("You must provide a value for the horizontal location of the floating cursor.", I[1], 1141, 10, "encoded['X'] != null");
    if (!(encoded[$_get]("Y") != null)) dart.assertFailed("You must provide a value for the vertical location of the floating cursor.", I[1], 1142, 10, "encoded['Y'] != null");
    let offset = state === text_input.FloatingCursorDragState.Update ? new ui.Offset.new(core.double.as(encoded[$_get]("X")), core.double.as(encoded[$_get]("Y"))) : ui.Offset.zero;
    return new text_input.RawFloatingCursorPoint.new({offset: offset, state: state});
  };
  autofill.AutofillHints = class AutofillHints extends core.Object {};
  (autofill.AutofillHints.__ = function() {
    ;
  }).prototype = autofill.AutofillHints.prototype;
  dart.addTypeTests(autofill.AutofillHints);
  dart.addTypeCaches(autofill.AutofillHints);
  dart.setLibraryUri(autofill.AutofillHints, I[2]);
  dart.defineLazy(autofill.AutofillHints, {
    /*autofill.AutofillHints.addressCity*/get addressCity() {
      return "addressCity";
    },
    /*autofill.AutofillHints.addressCityAndState*/get addressCityAndState() {
      return "addressCityAndState";
    },
    /*autofill.AutofillHints.addressState*/get addressState() {
      return "addressState";
    },
    /*autofill.AutofillHints.birthday*/get birthday() {
      return "birthday";
    },
    /*autofill.AutofillHints.birthdayDay*/get birthdayDay() {
      return "birthdayDay";
    },
    /*autofill.AutofillHints.birthdayMonth*/get birthdayMonth() {
      return "birthdayMonth";
    },
    /*autofill.AutofillHints.birthdayYear*/get birthdayYear() {
      return "birthdayYear";
    },
    /*autofill.AutofillHints.countryCode*/get countryCode() {
      return "countryCode";
    },
    /*autofill.AutofillHints.countryName*/get countryName() {
      return "countryName";
    },
    /*autofill.AutofillHints.creditCardExpirationDate*/get creditCardExpirationDate() {
      return "creditCardExpirationDate";
    },
    /*autofill.AutofillHints.creditCardExpirationDay*/get creditCardExpirationDay() {
      return "creditCardExpirationDay";
    },
    /*autofill.AutofillHints.creditCardExpirationMonth*/get creditCardExpirationMonth() {
      return "creditCardExpirationMonth";
    },
    /*autofill.AutofillHints.creditCardExpirationYear*/get creditCardExpirationYear() {
      return "creditCardExpirationYear";
    },
    /*autofill.AutofillHints.creditCardFamilyName*/get creditCardFamilyName() {
      return "creditCardFamilyName";
    },
    /*autofill.AutofillHints.creditCardGivenName*/get creditCardGivenName() {
      return "creditCardGivenName";
    },
    /*autofill.AutofillHints.creditCardMiddleName*/get creditCardMiddleName() {
      return "creditCardMiddleName";
    },
    /*autofill.AutofillHints.creditCardName*/get creditCardName() {
      return "creditCardName";
    },
    /*autofill.AutofillHints.creditCardNumber*/get creditCardNumber() {
      return "creditCardNumber";
    },
    /*autofill.AutofillHints.creditCardSecurityCode*/get creditCardSecurityCode() {
      return "creditCardSecurityCode";
    },
    /*autofill.AutofillHints.creditCardType*/get creditCardType() {
      return "creditCardType";
    },
    /*autofill.AutofillHints.email*/get email() {
      return "email";
    },
    /*autofill.AutofillHints.familyName*/get familyName() {
      return "familyName";
    },
    /*autofill.AutofillHints.fullStreetAddress*/get fullStreetAddress() {
      return "fullStreetAddress";
    },
    /*autofill.AutofillHints.gender*/get gender() {
      return "gender";
    },
    /*autofill.AutofillHints.givenName*/get givenName() {
      return "givenName";
    },
    /*autofill.AutofillHints.impp*/get impp() {
      return "impp";
    },
    /*autofill.AutofillHints.jobTitle*/get jobTitle() {
      return "jobTitle";
    },
    /*autofill.AutofillHints.language*/get language() {
      return "language";
    },
    /*autofill.AutofillHints.location*/get location() {
      return "location";
    },
    /*autofill.AutofillHints.middleInitial*/get middleInitial() {
      return "middleInitial";
    },
    /*autofill.AutofillHints.middleName*/get middleName() {
      return "middleName";
    },
    /*autofill.AutofillHints.name_*/get name_() {
      return "name";
    },
    /*autofill.AutofillHints.namePrefix*/get namePrefix() {
      return "namePrefix";
    },
    /*autofill.AutofillHints.nameSuffix*/get nameSuffix() {
      return "nameSuffix";
    },
    /*autofill.AutofillHints.newPassword*/get newPassword() {
      return "newPassword";
    },
    /*autofill.AutofillHints.newUsername*/get newUsername() {
      return "newUsername";
    },
    /*autofill.AutofillHints.nickname*/get nickname() {
      return "nickname";
    },
    /*autofill.AutofillHints.oneTimeCode*/get oneTimeCode() {
      return "oneTimeCode";
    },
    /*autofill.AutofillHints.organizationName*/get organizationName() {
      return "organizationName";
    },
    /*autofill.AutofillHints.password*/get password() {
      return "password";
    },
    /*autofill.AutofillHints.photo*/get photo() {
      return "photo";
    },
    /*autofill.AutofillHints.postalAddress*/get postalAddress() {
      return "postalAddress";
    },
    /*autofill.AutofillHints.postalAddressExtended*/get postalAddressExtended() {
      return "postalAddressExtended";
    },
    /*autofill.AutofillHints.postalAddressExtendedPostalCode*/get postalAddressExtendedPostalCode() {
      return "postalAddressExtendedPostalCode";
    },
    /*autofill.AutofillHints.postalCode*/get postalCode() {
      return "postalCode";
    },
    /*autofill.AutofillHints.streetAddressLevel1*/get streetAddressLevel1() {
      return "streetAddressLevel1";
    },
    /*autofill.AutofillHints.streetAddressLevel2*/get streetAddressLevel2() {
      return "streetAddressLevel2";
    },
    /*autofill.AutofillHints.streetAddressLevel3*/get streetAddressLevel3() {
      return "streetAddressLevel3";
    },
    /*autofill.AutofillHints.streetAddressLevel4*/get streetAddressLevel4() {
      return "streetAddressLevel4";
    },
    /*autofill.AutofillHints.streetAddressLine1*/get streetAddressLine1() {
      return "streetAddressLine1";
    },
    /*autofill.AutofillHints.streetAddressLine2*/get streetAddressLine2() {
      return "streetAddressLine2";
    },
    /*autofill.AutofillHints.streetAddressLine3*/get streetAddressLine3() {
      return "streetAddressLine3";
    },
    /*autofill.AutofillHints.sublocality*/get sublocality() {
      return "sublocality";
    },
    /*autofill.AutofillHints.telephoneNumber*/get telephoneNumber() {
      return "telephoneNumber";
    },
    /*autofill.AutofillHints.telephoneNumberAreaCode*/get telephoneNumberAreaCode() {
      return "telephoneNumberAreaCode";
    },
    /*autofill.AutofillHints.telephoneNumberCountryCode*/get telephoneNumberCountryCode() {
      return "telephoneNumberCountryCode";
    },
    /*autofill.AutofillHints.telephoneNumberDevice*/get telephoneNumberDevice() {
      return "telephoneNumberDevice";
    },
    /*autofill.AutofillHints.telephoneNumberExtension*/get telephoneNumberExtension() {
      return "telephoneNumberExtension";
    },
    /*autofill.AutofillHints.telephoneNumberLocal*/get telephoneNumberLocal() {
      return "telephoneNumberLocal";
    },
    /*autofill.AutofillHints.telephoneNumberLocalPrefix*/get telephoneNumberLocalPrefix() {
      return "telephoneNumberLocalPrefix";
    },
    /*autofill.AutofillHints.telephoneNumberLocalSuffix*/get telephoneNumberLocalSuffix() {
      return "telephoneNumberLocalSuffix";
    },
    /*autofill.AutofillHints.telephoneNumberNational*/get telephoneNumberNational() {
      return "telephoneNumberNational";
    },
    /*autofill.AutofillHints.transactionAmount*/get transactionAmount() {
      return "transactionAmount";
    },
    /*autofill.AutofillHints.transactionCurrency*/get transactionCurrency() {
      return "transactionCurrency";
    },
    /*autofill.AutofillHints.url*/get url() {
      return "url";
    },
    /*autofill.AutofillHints.username*/get username() {
      return "username";
    }
  }, false);
  var uniqueIdentifier$ = dart.privateName(autofill, "AutofillConfiguration.uniqueIdentifier");
  var autofillHints$ = dart.privateName(autofill, "AutofillConfiguration.autofillHints");
  var currentEditingValue$ = dart.privateName(autofill, "AutofillConfiguration.currentEditingValue");
  autofill.AutofillConfiguration = class AutofillConfiguration extends core.Object {
    get uniqueIdentifier() {
      return this[uniqueIdentifier$];
    }
    set uniqueIdentifier(value) {
      super.uniqueIdentifier = value;
    }
    get autofillHints() {
      return this[autofillHints$];
    }
    set autofillHints(value) {
      super.autofillHints = value;
    }
    get currentEditingValue() {
      return this[currentEditingValue$];
    }
    set currentEditingValue(value) {
      super.currentEditingValue = value;
    }
    toJson() {
      if (!this.autofillHints[$isNotEmpty]) dart.assertFailed(null, I[3], 700, 12, "autofillHints.isNotEmpty");
      return new (T.IdentityMapOfString$dynamic()).from(["uniqueIdentifier", this.uniqueIdentifier, "hints", this.autofillHints, "editingValue", this.currentEditingValue.toJSON()]);
    }
  };
  (autofill.AutofillConfiguration.new = function(opts) {
    let uniqueIdentifier = opts && 'uniqueIdentifier' in opts ? opts.uniqueIdentifier : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let currentEditingValue = opts && 'currentEditingValue' in opts ? opts.currentEditingValue : null;
    this[uniqueIdentifier$] = uniqueIdentifier;
    this[autofillHints$] = autofillHints;
    this[currentEditingValue$] = currentEditingValue;
    if (!(uniqueIdentifier !== null)) dart.assertFailed(null, I[3], 635, 15, "uniqueIdentifier != null");
    if (!(autofillHints !== null)) dart.assertFailed(null, I[3], 636, 15, "autofillHints != null");
    ;
  }).prototype = autofill.AutofillConfiguration.prototype;
  dart.addTypeTests(autofill.AutofillConfiguration);
  dart.addTypeCaches(autofill.AutofillConfiguration);
  dart.setMethodSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getMethods(autofill.AutofillConfiguration.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(autofill.AutofillConfiguration, I[2]);
  dart.setFieldSignature(autofill.AutofillConfiguration, () => ({
    __proto__: dart.getFields(autofill.AutofillConfiguration.__proto__),
    uniqueIdentifier: dart.finalFieldType(core.String),
    autofillHints: dart.finalFieldType(core.List$(core.String)),
    currentEditingValue: dart.finalFieldType(text_input.TextEditingValue)
  }));
  autofill.AutofillClient = class AutofillClient extends core.Object {};
  (autofill.AutofillClient.new = function() {
    ;
  }).prototype = autofill.AutofillClient.prototype;
  dart.addTypeTests(autofill.AutofillClient);
  dart.addTypeCaches(autofill.AutofillClient);
  dart.setLibraryUri(autofill.AutofillClient, I[2]);
  autofill.AutofillScope = class AutofillScope extends core.Object {};
  (autofill.AutofillScope.new = function() {
    ;
  }).prototype = autofill.AutofillScope.prototype;
  dart.addTypeTests(autofill.AutofillScope);
  dart.addTypeCaches(autofill.AutofillScope);
  dart.setLibraryUri(autofill.AutofillScope, I[2]);
  autofill._AutofillScopeTextInputConfiguration = class _AutofillScopeTextInputConfiguration extends text_input.TextInputConfiguration {
    toJson() {
      let result = super.toJson();
      result[$_set]("fields", this.allConfigurations[$map](T.MapOfString$dynamic(), dart.fn(configuration => configuration.toJson(), T.TextInputConfigurationToMapOfString$dynamic()))[$toList]({growable: false}));
      return result;
    }
  };
  (autofill._AutofillScopeTextInputConfiguration.new = function(opts) {
    let allConfigurations = opts && 'allConfigurations' in opts ? opts.allConfigurations : null;
    let currentClientConfiguration = opts && 'currentClientConfiguration' in opts ? opts.currentClientConfiguration : null;
    this.allConfigurations = allConfigurations;
    if (!(allConfigurations !== null)) dart.assertFailed(null, I[3], 772, 15, "allConfigurations != null");
    if (!(currentClientConfiguration !== null)) dart.assertFailed(null, I[3], 773, 15, "currentClientConfiguration != null");
    autofill._AutofillScopeTextInputConfiguration.__proto__.new.call(this, {inputType: currentClientConfiguration.inputType, obscureText: currentClientConfiguration.obscureText, autocorrect: currentClientConfiguration.autocorrect, smartDashesType: currentClientConfiguration.smartDashesType, smartQuotesType: currentClientConfiguration.smartQuotesType, enableSuggestions: currentClientConfiguration.enableSuggestions, inputAction: currentClientConfiguration.inputAction, textCapitalization: currentClientConfiguration.textCapitalization, keyboardAppearance: currentClientConfiguration.keyboardAppearance, actionLabel: currentClientConfiguration.actionLabel, autofillConfiguration: currentClientConfiguration.autofillConfiguration});
    ;
  }).prototype = autofill._AutofillScopeTextInputConfiguration.prototype;
  dart.addTypeTests(autofill._AutofillScopeTextInputConfiguration);
  dart.addTypeCaches(autofill._AutofillScopeTextInputConfiguration);
  dart.setLibraryUri(autofill._AutofillScopeTextInputConfiguration, I[2]);
  dart.setFieldSignature(autofill._AutofillScopeTextInputConfiguration, () => ({
    __proto__: dart.getFields(autofill._AutofillScopeTextInputConfiguration.__proto__),
    allConfigurations: dart.finalFieldType(core.Iterable$(text_input.TextInputConfiguration))
  }));
  autofill.AutofillScopeMixin = class AutofillScopeMixin extends core.Object {};
  autofill.AutofillScopeMixin[dart.mixinOn] = Object => class AutofillScopeMixin extends Object {
    attach(trigger, configuration) {
      if (!(trigger !== null)) dart.assertFailed(null, I[3], 805, 12, "trigger != null");
      if (!!this.autofillClients[$any](dart.fn(client => client.textInputConfiguration.autofillConfiguration == null, T.AutofillClientTobool()))) dart.assertFailed("Every client in AutofillScope.autofillClients must enable autofill", I[3], 807, 7, "!autofillClients.any((AutofillClient client) => client.textInputConfiguration.autofillConfiguration == null)");
      let inputConfiguration = new autofill._AutofillScopeTextInputConfiguration.new({allConfigurations: this.autofillClients[$map](text_input.TextInputConfiguration, dart.fn(client => client.textInputConfiguration, T.AutofillClientToTextInputConfiguration())), currentClientConfiguration: configuration});
      return text_input.TextInput.attach(trigger, inputConfiguration);
    }
  };
  (autofill.AutofillScopeMixin[dart.mixinNew] = function() {
  }).prototype = autofill.AutofillScopeMixin.prototype;
  dart.addTypeTests(autofill.AutofillScopeMixin);
  dart.addTypeCaches(autofill.AutofillScopeMixin);
  autofill.AutofillScopeMixin[dart.implements] = () => [autofill.AutofillScope, core.Object];
  dart.setMethodSignature(autofill.AutofillScopeMixin, () => ({
    __proto__: dart.getMethods(autofill.AutofillScopeMixin.__proto__),
    attach: dart.fnType(text_input.TextInputConnection, [text_input.TextInputClient, text_input.TextInputConfiguration])
  }));
  dart.setLibraryUri(autofill.AutofillScopeMixin, I[2]);
  dart.trackLibraries("packages/flutter/src/services/text_input.dart", {
    "package:flutter/src/services/text_input.dart": text_input,
    "package:flutter/src/services/autofill.dart": autofill
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_input.dart","autofill.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/flutter/src/services/text_input.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_input: text_input,
    src__services__autofill: autofill
  };
}));

//# sourceMappingURL=text_input.dart.lib.js.map
=======
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.unknown",
        index: 4
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "package:flutter/src/gestures/events.dart",
    "file:///C:/flutter/sdk/packages/flutter/lib/src/gestures/events.dart"
  ];
  var embedderId$ = dart.privateName(events, "PointerEvent.embedderId");
  var timeStamp$ = dart.privateName(events, "PointerEvent.timeStamp");
  var pointer$ = dart.privateName(events, "PointerEvent.pointer");
  var kind$ = dart.privateName(events, "PointerEvent.kind");
  var device$ = dart.privateName(events, "PointerEvent.device");
  var position$ = dart.privateName(events, "PointerEvent.position");
  var delta$ = dart.privateName(events, "PointerEvent.delta");
  var buttons$ = dart.privateName(events, "PointerEvent.buttons");
  var down$ = dart.privateName(events, "PointerEvent.down");
  var obscured$ = dart.privateName(events, "PointerEvent.obscured");
  var pressure$ = dart.privateName(events, "PointerEvent.pressure");
  var pressureMin$ = dart.privateName(events, "PointerEvent.pressureMin");
  var pressureMax$ = dart.privateName(events, "PointerEvent.pressureMax");
  var distance$ = dart.privateName(events, "PointerEvent.distance");
  var distanceMax$ = dart.privateName(events, "PointerEvent.distanceMax");
  var size$ = dart.privateName(events, "PointerEvent.size");
  var radiusMajor$ = dart.privateName(events, "PointerEvent.radiusMajor");
  var radiusMinor$ = dart.privateName(events, "PointerEvent.radiusMinor");
  var radiusMin$ = dart.privateName(events, "PointerEvent.radiusMin");
  var radiusMax$ = dart.privateName(events, "PointerEvent.radiusMax");
  var orientation$ = dart.privateName(events, "PointerEvent.orientation");
  var tilt$ = dart.privateName(events, "PointerEvent.tilt");
  var platformData$ = dart.privateName(events, "PointerEvent.platformData");
  var synthesized$ = dart.privateName(events, "PointerEvent.synthesized");
  var transform$ = dart.privateName(events, "PointerEvent.transform");
  var original$ = dart.privateName(events, "PointerEvent.original");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _name = dart.privateName(ui, "_name");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  events.PointerEvent = class PointerEvent extends Object_Diagnosticable$36 {
    get embedderId() {
      return this[embedderId$];
    }
    set embedderId(value) {
      super.embedderId = value;
    }
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get pointer() {
      return this[pointer$];
    }
    set pointer(value) {
      super.pointer = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get down() {
      return this[down$];
    }
    set down(value) {
      super.down = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get synthesized() {
      return this[synthesized$];
    }
    set synthesized(value) {
      super.synthesized = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get original() {
      return this[original$];
    }
    set original(value) {
      super.original = value;
    }
    get localPosition() {
      return this.position;
    }
    get localDelta() {
      return this.delta;
    }
    get distanceMin() {
      return 0.0;
    }
    static transformPosition(transform, position) {
      if (transform == null) {
        return position;
      }
      let position3 = vector_math_64.Vector3.new(position.dx, position.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static transformDeltaViaPositions(opts) {
      let untransformedEndPosition = opts && 'untransformedEndPosition' in opts ? opts.untransformedEndPosition : null;
      let transformedEndPosition = opts && 'transformedEndPosition' in opts ? opts.transformedEndPosition : null;
      let untransformedDelta = opts && 'untransformedDelta' in opts ? opts.untransformedDelta : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      if (transform == null) {
        return untransformedDelta;
      }
      transformedEndPosition == null ? transformedEndPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition) : null;
      let transformedStartPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition['-'](untransformedDelta));
      return transformedEndPosition['-'](transformedStartPosition);
    }
    static removePerspectiveTransform(transform) {
      let t0;
      let vector = vector_math_64.Vector4.new(0.0, 0.0, 1.0, 0.0);
      t0 = transform.clone();
      return (() => {
        t0.setColumn(2, vector);
        t0.setRow(2, vector);
        return t0;
      })();
    }
  };
  (events.PointerEvent.new = function(opts) {
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let down = opts && 'down' in opts ? opts.down : false;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[embedderId$] = embedderId;
    this[timeStamp$] = timeStamp;
    this[pointer$] = pointer;
    this[kind$] = kind;
    this[device$] = device;
    this[position$] = position;
    this[delta$] = delta;
    this[buttons$] = buttons;
    this[down$] = down;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[synthesized$] = synthesized;
    this[transform$] = transform;
    this[original$] = original;
    ;
  }).prototype = events.PointerEvent.prototype;
  dart.addTypeTests(events.PointerEvent);
  dart.addTypeCaches(events.PointerEvent);
  dart.setGetterSignature(events.PointerEvent, () => ({
    __proto__: dart.getGetters(events.PointerEvent.__proto__),
    localPosition: ui.Offset,
    localDelta: ui.Offset,
    distanceMin: core.double
  }));
  dart.setLibraryUri(events.PointerEvent, I[0]);
  dart.setFieldSignature(events.PointerEvent, () => ({
    __proto__: dart.getFields(events.PointerEvent.__proto__),
    embedderId: dart.finalFieldType(core.int),
    timeStamp: dart.finalFieldType(core.Duration),
    pointer: dart.finalFieldType(core.int),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    device: dart.finalFieldType(core.int),
    position: dart.finalFieldType(ui.Offset),
    delta: dart.finalFieldType(ui.Offset),
    buttons: dart.finalFieldType(core.int),
    down: dart.finalFieldType(core.bool),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    synthesized: dart.finalFieldType(core.bool),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4)),
    original: dart.finalFieldType(dart.nullable(events.PointerEvent))
  }));
  events._PointerEventDescription = class _PointerEventDescription extends events.PointerEvent {};
  events._PointerEventDescription[dart.mixinOn] = PointerEvent => class _PointerEventDescription extends PointerEvent {
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("position", this.position));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition, {defaultValue: this.position, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("delta", this.delta, {defaultValue: ui.Offset.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("localDelta", this.localDelta, {defaultValue: this.delta, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfDuration()).new("timeStamp", this.timeStamp, {defaultValue: core.Duration.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("pointer", this.pointer, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.EnumPropertyOfPointerDeviceKind()).new("kind", this.kind, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("device", this.device, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("buttons", this.buttons, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("down", this.down, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressure", this.pressure, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMin", this.pressureMin, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMax", this.pressureMax, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distance", this.distance, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMin", this.distanceMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMax", this.distanceMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("size", this.size, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMajor", this.radiusMajor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMinor", this.radiusMinor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMin", this.radiusMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMax", this.radiusMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("orientation", this.orientation, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("tilt", this.tilt, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("platformData", this.platformData, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("obscured", {value: this.obscured, ifTrue: "obscured", level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("synthesized", {value: this.synthesized, ifTrue: "synthesized", level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("embedderId", this.embedderId, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
    }
    toStringFull() {
      return this.toString({minLevel: diagnostics.DiagnosticLevel.fine});
    }
  };
  dart.addTypeTests(events._PointerEventDescription);
  dart.addTypeCaches(events._PointerEventDescription);
  events._PointerEventDescription[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._PointerEventDescription, () => ({
    __proto__: dart.getMethods(events._PointerEventDescription.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(events._PointerEventDescription, I[0]);
  events._AbstractPointerEvent = class _AbstractPointerEvent extends core.Object {};
  (events._AbstractPointerEvent.new = function() {
    ;
  }).prototype = events._AbstractPointerEvent.prototype;
  dart.addTypeTests(events._AbstractPointerEvent);
  dart.addTypeCaches(events._AbstractPointerEvent);
  events._AbstractPointerEvent[dart.implements] = () => [events.PointerEvent];
  dart.setLibraryUri(events._AbstractPointerEvent, I[0]);
  var ___TransformedPointerEvent_localPosition = dart.privateName(events, "_#_TransformedPointerEvent#localPosition");
  var ___TransformedPointerEvent_localDelta = dart.privateName(events, "_#_TransformedPointerEvent#localDelta");
  const _AbstractPointerEvent_Diagnosticable$36 = class _AbstractPointerEvent_Diagnosticable extends events._AbstractPointerEvent {};
  (_AbstractPointerEvent_Diagnosticable$36.new = function() {
  }).prototype = _AbstractPointerEvent_Diagnosticable$36.prototype;
  dart.applyMixin(_AbstractPointerEvent_Diagnosticable$36, diagnostics.Diagnosticable);
  const _AbstractPointerEvent__PointerEventDescription$36 = class _AbstractPointerEvent__PointerEventDescription extends _AbstractPointerEvent_Diagnosticable$36 {};
  (_AbstractPointerEvent__PointerEventDescription$36.new = function() {
  }).prototype = _AbstractPointerEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(_AbstractPointerEvent__PointerEventDescription$36, events._PointerEventDescription);
  events._TransformedPointerEvent = class _TransformedPointerEvent extends _AbstractPointerEvent__PointerEventDescription$36 {
    get embedderId() {
      return this.original.embedderId;
    }
    get timeStamp() {
      return this.original.timeStamp;
    }
    get pointer() {
      return this.original.pointer;
    }
    get kind() {
      return this.original.kind;
    }
    get device() {
      return this.original.device;
    }
    get position() {
      return this.original.position;
    }
    get delta() {
      return this.original.delta;
    }
    get buttons() {
      return this.original.buttons;
    }
    get down() {
      return this.original.down;
    }
    get obscured() {
      return this.original.obscured;
    }
    get pressure() {
      return this.original.pressure;
    }
    get pressureMin() {
      return this.original.pressureMin;
    }
    get pressureMax() {
      return this.original.pressureMax;
    }
    get distance() {
      return this.original.distance;
    }
    get distanceMin() {
      return 0.0;
    }
    get distanceMax() {
      return this.original.distanceMax;
    }
    get size() {
      return this.original.size;
    }
    get radiusMajor() {
      return this.original.radiusMajor;
    }
    get radiusMinor() {
      return this.original.radiusMinor;
    }
    get radiusMin() {
      return this.original.radiusMin;
    }
    get radiusMax() {
      return this.original.radiusMax;
    }
    get orientation() {
      return this.original.orientation;
    }
    get tilt() {
      return this.original.tilt;
    }
    get platformData() {
      return this.original.platformData;
    }
    get synthesized() {
      return this.original.synthesized;
    }
    get localPosition() {
      let t1, t0;
      t0 = this[___TransformedPointerEvent_localPosition];
      return t0 == null ? (t1 = events.PointerEvent.transformPosition(this.transform, this.position), this[___TransformedPointerEvent_localPosition] == null ? this[___TransformedPointerEvent_localPosition] = t1 : dart.throw(new _internal.LateError.fieldADI("localPosition"))) : t0;
    }
    get localDelta() {
      let t1, t0;
      t0 = this[___TransformedPointerEvent_localDelta];
      return t0 == null ? (t1 = events.PointerEvent.transformDeltaViaPositions({transform: this.transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: this.localPosition}), this[___TransformedPointerEvent_localDelta] == null ? this[___TransformedPointerEvent_localDelta] = t1 : dart.throw(new _internal.LateError.fieldADI("localDelta"))) : t0;
    }
  };
  (events._TransformedPointerEvent.new = function() {
    this[___TransformedPointerEvent_localPosition] = null;
    this[___TransformedPointerEvent_localDelta] = null;
    ;
  }).prototype = events._TransformedPointerEvent.prototype;
  dart.addTypeTests(events._TransformedPointerEvent);
  dart.addTypeCaches(events._TransformedPointerEvent);
  dart.setGetterSignature(events._TransformedPointerEvent, () => ({
    __proto__: dart.getGetters(events._TransformedPointerEvent.__proto__),
    embedderId: core.int,
    timeStamp: core.Duration,
    pointer: core.int,
    kind: ui.PointerDeviceKind,
    device: core.int,
    position: ui.Offset,
    delta: ui.Offset,
    buttons: core.int,
    down: core.bool,
    obscured: core.bool,
    pressure: core.double,
    pressureMin: core.double,
    pressureMax: core.double,
    distance: core.double,
    distanceMin: core.double,
    distanceMax: core.double,
    size: core.double,
    radiusMajor: core.double,
    radiusMinor: core.double,
    radiusMin: core.double,
    radiusMax: core.double,
    orientation: core.double,
    tilt: core.double,
    platformData: core.int,
    synthesized: core.bool,
    localPosition: ui.Offset,
    localDelta: ui.Offset
  }));
  dart.setLibraryUri(events._TransformedPointerEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerEvent.__proto__),
    [___TransformedPointerEvent_localPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [___TransformedPointerEvent_localDelta]: dart.fieldType(dart.nullable(ui.Offset))
  }));
  events._CopyPointerAddedEvent = class _CopyPointerAddedEvent extends events.PointerEvent {};
  events._CopyPointerAddedEvent[dart.mixinOn] = PointerEvent => class _CopyPointerAddedEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerAddedEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), obscured: (t0$2 = obscured, t0$2 == null ? this.obscured : t0$2), pressureMin: (t0$3 = pressureMin, t0$3 == null ? this.pressureMin : t0$3), pressureMax: (t0$4 = pressureMax, t0$4 == null ? this.pressureMax : t0$4), distance: (t0$5 = distance, t0$5 == null ? this.distance : t0$5), distanceMax: (t0$6 = distanceMax, t0$6 == null ? this.distanceMax : t0$6), radiusMin: (t0$7 = radiusMin, t0$7 == null ? this.radiusMin : t0$7), radiusMax: (t0$8 = radiusMax, t0$8 == null ? this.radiusMax : t0$8), orientation: (t0$9 = orientation, t0$9 == null ? this.orientation : t0$9), tilt: (t0$10 = tilt, t0$10 == null ? this.tilt : t0$10), embedderId: (t0$11 = embedderId, t0$11 == null ? this.embedderId : t0$11)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerAddedEvent);
  dart.addTypeCaches(events._CopyPointerAddedEvent);
  events._CopyPointerAddedEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerAddedEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerAddedEvent.__proto__),
    copyWith: dart.fnType(events.PointerAddedEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerAddedEvent, I[0]);
  const PointerEvent__PointerEventDescription$36 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36.new = function(opts) {
    PointerEvent__PointerEventDescription$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36, events._PointerEventDescription);
  const PointerEvent__CopyPointerAddedEvent$36 = class PointerEvent__CopyPointerAddedEvent extends PointerEvent__PointerEventDescription$36 {};
  (PointerEvent__CopyPointerAddedEvent$36.new = function(opts) {
    PointerEvent__CopyPointerAddedEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerAddedEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerAddedEvent$36, events._CopyPointerAddedEvent);
  events.PointerAddedEvent = class PointerAddedEvent extends PointerEvent__CopyPointerAddedEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerAddedEvent.new((t0 = T.PointerAddedEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerAddedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerAddedEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerAddedEvent.prototype;
  dart.addTypeTests(events.PointerAddedEvent);
  dart.addTypeCaches(events.PointerAddedEvent);
  dart.setMethodSignature(events.PointerAddedEvent, () => ({
    __proto__: dart.getMethods(events.PointerAddedEvent.__proto__),
    transformed: dart.fnType(events.PointerAddedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerAddedEvent, I[0]);
  var original$0 = dart.privateName(events, "_TransformedPointerAddedEvent.original");
  var transform$0 = dart.privateName(events, "_TransformedPointerAddedEvent.transform");
  const _TransformedPointerEvent__CopyPointerAddedEvent$36 = class _TransformedPointerEvent__CopyPointerAddedEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerAddedEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerAddedEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerAddedEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerAddedEvent$36, events._CopyPointerAddedEvent);
  events._TransformedPointerAddedEvent = class _TransformedPointerAddedEvent extends _TransformedPointerEvent__CopyPointerAddedEvent$36 {
    get original() {
      return this[original$0];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerAddedEvent.new = function(original, transform) {
    this[original$0] = original;
    this[transform$0] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 855, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 855, 40, "transform != null");
    events._TransformedPointerAddedEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerAddedEvent.prototype;
  dart.addTypeTests(events._TransformedPointerAddedEvent);
  dart.addTypeCaches(events._TransformedPointerAddedEvent);
  events._TransformedPointerAddedEvent[dart.implements] = () => [events.PointerAddedEvent];
  dart.setMethodSignature(events._TransformedPointerAddedEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerAddedEvent.__proto__),
    transformed: dart.fnType(events.PointerAddedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerAddedEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerAddedEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerAddedEvent.__proto__),
    original: dart.finalFieldType(events.PointerAddedEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerRemovedEvent = class _CopyPointerRemovedEvent extends events.PointerEvent {};
  events._CopyPointerRemovedEvent[dart.mixinOn] = PointerEvent => class _CopyPointerRemovedEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerRemovedEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), obscured: (t0$2 = obscured, t0$2 == null ? this.obscured : t0$2), pressureMin: (t0$3 = pressureMin, t0$3 == null ? this.pressureMin : t0$3), pressureMax: (t0$4 = pressureMax, t0$4 == null ? this.pressureMax : t0$4), distanceMax: (t0$5 = distanceMax, t0$5 == null ? this.distanceMax : t0$5), radiusMin: (t0$6 = radiusMin, t0$6 == null ? this.radiusMin : t0$6), radiusMax: (t0$7 = radiusMax, t0$7 == null ? this.radiusMax : t0$7), embedderId: (t0$8 = embedderId, t0$8 == null ? this.embedderId : t0$8)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerRemovedEvent);
  dart.addTypeCaches(events._CopyPointerRemovedEvent);
  events._CopyPointerRemovedEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerRemovedEvent.__proto__),
    copyWith: dart.fnType(events.PointerRemovedEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerRemovedEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$ = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$.new = function(opts) {
    PointerEvent__PointerEventDescription$36$.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$, events._PointerEventDescription);
  const PointerEvent__CopyPointerRemovedEvent$36 = class PointerEvent__CopyPointerRemovedEvent extends PointerEvent__PointerEventDescription$36$ {};
  (PointerEvent__CopyPointerRemovedEvent$36.new = function(opts) {
    PointerEvent__CopyPointerRemovedEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerRemovedEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerRemovedEvent$36, events._CopyPointerRemovedEvent);
  events.PointerRemovedEvent = class PointerRemovedEvent extends PointerEvent__CopyPointerRemovedEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerRemovedEvent.new((t0 = T.PointerRemovedEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerRemovedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let original = opts && 'original' in opts ? opts.original : null;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerRemovedEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, original: original, embedderId: embedderId});
    ;
  }).prototype = events.PointerRemovedEvent.prototype;
  dart.addTypeTests(events.PointerRemovedEvent);
  dart.addTypeCaches(events.PointerRemovedEvent);
  dart.setMethodSignature(events.PointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events.PointerRemovedEvent.__proto__),
    transformed: dart.fnType(events.PointerRemovedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerRemovedEvent, I[0]);
  var original$1 = dart.privateName(events, "_TransformedPointerRemovedEvent.original");
  var transform$1 = dart.privateName(events, "_TransformedPointerRemovedEvent.transform");
  const _TransformedPointerEvent__CopyPointerRemovedEvent$36 = class _TransformedPointerEvent__CopyPointerRemovedEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerRemovedEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerRemovedEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerRemovedEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerRemovedEvent$36, events._CopyPointerRemovedEvent);
  events._TransformedPointerRemovedEvent = class _TransformedPointerRemovedEvent extends _TransformedPointerEvent__CopyPointerRemovedEvent$36 {
    get original() {
      return this[original$1];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerRemovedEvent.new = function(original, transform) {
    this[original$1] = original;
    this[transform$1] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 959, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 959, 40, "transform != null");
    events._TransformedPointerRemovedEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerRemovedEvent.prototype;
  dart.addTypeTests(events._TransformedPointerRemovedEvent);
  dart.addTypeCaches(events._TransformedPointerRemovedEvent);
  events._TransformedPointerRemovedEvent[dart.implements] = () => [events.PointerRemovedEvent];
  dart.setMethodSignature(events._TransformedPointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerRemovedEvent.__proto__),
    transformed: dart.fnType(events.PointerRemovedEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerRemovedEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerRemovedEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerRemovedEvent.__proto__),
    original: dart.finalFieldType(events.PointerRemovedEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerHoverEvent = class _CopyPointerHoverEvent extends events.PointerEvent {};
  events._CopyPointerHoverEvent[dart.mixinOn] = PointerEvent => class _CopyPointerHoverEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerHoverEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), delta: (t0$2 = delta, t0$2 == null ? this.delta : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressureMin: (t0$5 = pressureMin, t0$5 == null ? this.pressureMin : t0$5), pressureMax: (t0$6 = pressureMax, t0$6 == null ? this.pressureMax : t0$6), distance: (t0$7 = distance, t0$7 == null ? this.distance : t0$7), distanceMax: (t0$8 = distanceMax, t0$8 == null ? this.distanceMax : t0$8), size: (t0$9 = size, t0$9 == null ? this.size : t0$9), radiusMajor: (t0$10 = radiusMajor, t0$10 == null ? this.radiusMajor : t0$10), radiusMinor: (t0$11 = radiusMinor, t0$11 == null ? this.radiusMinor : t0$11), radiusMin: (t0$12 = radiusMin, t0$12 == null ? this.radiusMin : t0$12), radiusMax: (t0$13 = radiusMax, t0$13 == null ? this.radiusMax : t0$13), orientation: (t0$14 = orientation, t0$14 == null ? this.orientation : t0$14), tilt: (t0$15 = tilt, t0$15 == null ? this.tilt : t0$15), synthesized: (t0$16 = synthesized, t0$16 == null ? this.synthesized : t0$16), embedderId: (t0$17 = embedderId, t0$17 == null ? this.embedderId : t0$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerHoverEvent);
  dart.addTypeCaches(events._CopyPointerHoverEvent);
  events._CopyPointerHoverEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerHoverEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerHoverEvent.__proto__),
    copyWith: dart.fnType(events.PointerHoverEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerHoverEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$0 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$0.new = function(opts) {
    PointerEvent__PointerEventDescription$36$0.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$0.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$0, events._PointerEventDescription);
  const PointerEvent__CopyPointerHoverEvent$36 = class PointerEvent__CopyPointerHoverEvent extends PointerEvent__PointerEventDescription$36$0 {};
  (PointerEvent__CopyPointerHoverEvent$36.new = function(opts) {
    PointerEvent__CopyPointerHoverEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerHoverEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerHoverEvent$36, events._CopyPointerHoverEvent);
  events.PointerHoverEvent = class PointerHoverEvent extends PointerEvent__CopyPointerHoverEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerHoverEvent.new((t0 = T.PointerHoverEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerHoverEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerHoverEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerHoverEvent.prototype;
  dart.addTypeTests(events.PointerHoverEvent);
  dart.addTypeCaches(events.PointerHoverEvent);
  dart.setMethodSignature(events.PointerHoverEvent, () => ({
    __proto__: dart.getMethods(events.PointerHoverEvent.__proto__),
    transformed: dart.fnType(events.PointerHoverEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerHoverEvent, I[0]);
  var original$2 = dart.privateName(events, "_TransformedPointerHoverEvent.original");
  var transform$2 = dart.privateName(events, "_TransformedPointerHoverEvent.transform");
  const _TransformedPointerEvent__CopyPointerHoverEvent$36 = class _TransformedPointerEvent__CopyPointerHoverEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerHoverEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerHoverEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerHoverEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerHoverEvent$36, events._CopyPointerHoverEvent);
  events._TransformedPointerHoverEvent = class _TransformedPointerHoverEvent extends _TransformedPointerEvent__CopyPointerHoverEvent$36 {
    get original() {
      return this[original$2];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerHoverEvent.new = function(original, transform) {
    this[original$2] = original;
    this[transform$2] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1097, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1097, 40, "transform != null");
    events._TransformedPointerHoverEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerHoverEvent.prototype;
  dart.addTypeTests(events._TransformedPointerHoverEvent);
  dart.addTypeCaches(events._TransformedPointerHoverEvent);
  events._TransformedPointerHoverEvent[dart.implements] = () => [events.PointerHoverEvent];
  dart.setMethodSignature(events._TransformedPointerHoverEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerHoverEvent.__proto__),
    transformed: dart.fnType(events.PointerHoverEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerHoverEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerHoverEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerHoverEvent.__proto__),
    original: dart.finalFieldType(events.PointerHoverEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerEnterEvent = class _CopyPointerEnterEvent extends events.PointerEvent {};
  events._CopyPointerEnterEvent[dart.mixinOn] = PointerEvent => class _CopyPointerEnterEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerEnterEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), delta: (t0$2 = delta, t0$2 == null ? this.delta : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressureMin: (t0$5 = pressureMin, t0$5 == null ? this.pressureMin : t0$5), pressureMax: (t0$6 = pressureMax, t0$6 == null ? this.pressureMax : t0$6), distance: (t0$7 = distance, t0$7 == null ? this.distance : t0$7), distanceMax: (t0$8 = distanceMax, t0$8 == null ? this.distanceMax : t0$8), size: (t0$9 = size, t0$9 == null ? this.size : t0$9), radiusMajor: (t0$10 = radiusMajor, t0$10 == null ? this.radiusMajor : t0$10), radiusMinor: (t0$11 = radiusMinor, t0$11 == null ? this.radiusMinor : t0$11), radiusMin: (t0$12 = radiusMin, t0$12 == null ? this.radiusMin : t0$12), radiusMax: (t0$13 = radiusMax, t0$13 == null ? this.radiusMax : t0$13), orientation: (t0$14 = orientation, t0$14 == null ? this.orientation : t0$14), tilt: (t0$15 = tilt, t0$15 == null ? this.tilt : t0$15), synthesized: (t0$16 = synthesized, t0$16 == null ? this.synthesized : t0$16), embedderId: (t0$17 = embedderId, t0$17 == null ? this.embedderId : t0$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerEnterEvent);
  dart.addTypeCaches(events._CopyPointerEnterEvent);
  events._CopyPointerEnterEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerEnterEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerEnterEvent.__proto__),
    copyWith: dart.fnType(events.PointerEnterEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerEnterEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$1 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$1.new = function(opts) {
    PointerEvent__PointerEventDescription$36$1.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$1.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$1, events._PointerEventDescription);
  const PointerEvent__CopyPointerEnterEvent$36 = class PointerEvent__CopyPointerEnterEvent extends PointerEvent__PointerEventDescription$36$1 {};
  (PointerEvent__CopyPointerEnterEvent$36.new = function(opts) {
    PointerEvent__CopyPointerEnterEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerEnterEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerEnterEvent$36, events._CopyPointerEnterEvent);
  events.PointerEnterEvent = class PointerEnterEvent extends PointerEvent__CopyPointerEnterEvent$36 {
    static fromMouseEvent(event) {
      return new events.PointerEnterEvent.new({timeStamp: event.timeStamp, pointer: event.pointer, kind: event.kind, device: event.device, position: event.position, delta: event.delta, buttons: event.buttons, obscured: event.obscured, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distance: event.distance, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, down: event.down, synthesized: event.synthesized}).transformed(event.transform);
    }
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerEnterEvent.new((t0 = T.PointerEnterEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerEnterEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let down = opts && 'down' in opts ? opts.down : false;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerEnterEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: down, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerEnterEvent.prototype;
  dart.addTypeTests(events.PointerEnterEvent);
  dart.addTypeCaches(events.PointerEnterEvent);
  dart.setMethodSignature(events.PointerEnterEvent, () => ({
    __proto__: dart.getMethods(events.PointerEnterEvent.__proto__),
    transformed: dart.fnType(events.PointerEnterEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerEnterEvent, I[0]);
  var original$3 = dart.privateName(events, "_TransformedPointerEnterEvent.original");
  var transform$3 = dart.privateName(events, "_TransformedPointerEnterEvent.transform");
  const _TransformedPointerEvent__CopyPointerEnterEvent$36 = class _TransformedPointerEvent__CopyPointerEnterEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerEnterEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerEnterEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerEnterEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerEnterEvent$36, events._CopyPointerEnterEvent);
  events._TransformedPointerEnterEvent = class _TransformedPointerEnterEvent extends _TransformedPointerEvent__CopyPointerEnterEvent$36 {
    get original() {
      return this[original$3];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerEnterEvent.new = function(original, transform) {
    this[original$3] = original;
    this[transform$3] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1263, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1263, 40, "transform != null");
    events._TransformedPointerEnterEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerEnterEvent.prototype;
  dart.addTypeTests(events._TransformedPointerEnterEvent);
  dart.addTypeCaches(events._TransformedPointerEnterEvent);
  events._TransformedPointerEnterEvent[dart.implements] = () => [events.PointerEnterEvent];
  dart.setMethodSignature(events._TransformedPointerEnterEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerEnterEvent.__proto__),
    transformed: dart.fnType(events.PointerEnterEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerEnterEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerEnterEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerEnterEvent.__proto__),
    original: dart.finalFieldType(events.PointerEnterEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerExitEvent = class _CopyPointerExitEvent extends events.PointerEvent {};
  events._CopyPointerExitEvent[dart.mixinOn] = PointerEvent => class _CopyPointerExitEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerExitEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), delta: (t0$2 = delta, t0$2 == null ? this.delta : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressureMin: (t0$5 = pressureMin, t0$5 == null ? this.pressureMin : t0$5), pressureMax: (t0$6 = pressureMax, t0$6 == null ? this.pressureMax : t0$6), distance: (t0$7 = distance, t0$7 == null ? this.distance : t0$7), distanceMax: (t0$8 = distanceMax, t0$8 == null ? this.distanceMax : t0$8), size: (t0$9 = size, t0$9 == null ? this.size : t0$9), radiusMajor: (t0$10 = radiusMajor, t0$10 == null ? this.radiusMajor : t0$10), radiusMinor: (t0$11 = radiusMinor, t0$11 == null ? this.radiusMinor : t0$11), radiusMin: (t0$12 = radiusMin, t0$12 == null ? this.radiusMin : t0$12), radiusMax: (t0$13 = radiusMax, t0$13 == null ? this.radiusMax : t0$13), orientation: (t0$14 = orientation, t0$14 == null ? this.orientation : t0$14), tilt: (t0$15 = tilt, t0$15 == null ? this.tilt : t0$15), synthesized: (t0$16 = synthesized, t0$16 == null ? this.synthesized : t0$16), embedderId: (t0$17 = embedderId, t0$17 == null ? this.embedderId : t0$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerExitEvent);
  dart.addTypeCaches(events._CopyPointerExitEvent);
  events._CopyPointerExitEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerExitEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerExitEvent.__proto__),
    copyWith: dart.fnType(events.PointerExitEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerExitEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$2 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$2.new = function(opts) {
    PointerEvent__PointerEventDescription$36$2.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$2.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$2, events._PointerEventDescription);
  const PointerEvent__CopyPointerExitEvent$36 = class PointerEvent__CopyPointerExitEvent extends PointerEvent__PointerEventDescription$36$2 {};
  (PointerEvent__CopyPointerExitEvent$36.new = function(opts) {
    PointerEvent__CopyPointerExitEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerExitEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerExitEvent$36, events._CopyPointerExitEvent);
  events.PointerExitEvent = class PointerExitEvent extends PointerEvent__CopyPointerExitEvent$36 {
    static fromMouseEvent(event) {
      return new events.PointerExitEvent.new({timeStamp: event.timeStamp, pointer: event.pointer, kind: event.kind, device: event.device, position: event.position, delta: event.delta, buttons: event.buttons, obscured: event.obscured, pressureMin: event.pressureMin, pressureMax: event.pressureMax, distance: event.distance, distanceMax: event.distanceMax, size: event.size, radiusMajor: event.radiusMajor, radiusMinor: event.radiusMinor, radiusMin: event.radiusMin, radiusMax: event.radiusMax, orientation: event.orientation, tilt: event.tilt, down: event.down, synthesized: event.synthesized}).transformed(event.transform);
    }
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerExitEvent.new((t0 = T.PointerExitEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerExitEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let down = opts && 'down' in opts ? opts.down : false;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerExitEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: down, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerExitEvent.prototype;
  dart.addTypeTests(events.PointerExitEvent);
  dart.addTypeCaches(events.PointerExitEvent);
  dart.setMethodSignature(events.PointerExitEvent, () => ({
    __proto__: dart.getMethods(events.PointerExitEvent.__proto__),
    transformed: dart.fnType(events.PointerExitEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerExitEvent, I[0]);
  var original$4 = dart.privateName(events, "_TransformedPointerExitEvent.original");
  var transform$4 = dart.privateName(events, "_TransformedPointerExitEvent.transform");
  const _TransformedPointerEvent__CopyPointerExitEvent$36 = class _TransformedPointerEvent__CopyPointerExitEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerExitEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerExitEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerExitEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerExitEvent$36, events._CopyPointerExitEvent);
  events._TransformedPointerExitEvent = class _TransformedPointerExitEvent extends _TransformedPointerEvent__CopyPointerExitEvent$36 {
    get original() {
      return this[original$4];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$4];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerExitEvent.new = function(original, transform) {
    this[original$4] = original;
    this[transform$4] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1430, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1430, 40, "transform != null");
    events._TransformedPointerExitEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerExitEvent.prototype;
  dart.addTypeTests(events._TransformedPointerExitEvent);
  dart.addTypeCaches(events._TransformedPointerExitEvent);
  events._TransformedPointerExitEvent[dart.implements] = () => [events.PointerExitEvent];
  dart.setMethodSignature(events._TransformedPointerExitEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerExitEvent.__proto__),
    transformed: dart.fnType(events.PointerExitEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerExitEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerExitEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerExitEvent.__proto__),
    original: dart.finalFieldType(events.PointerExitEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerDownEvent = class _CopyPointerDownEvent extends events.PointerEvent {};
  events._CopyPointerDownEvent[dart.mixinOn] = PointerEvent => class _CopyPointerDownEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerDownEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), pointer: (t0$ = pointer, t0$ == null ? this.pointer : t0$), kind: (t0$0 = kind, t0$0 == null ? this.kind : t0$0), device: (t0$1 = device, t0$1 == null ? this.device : t0$1), position: (t0$2 = position, t0$2 == null ? this.position : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressure: (t0$5 = pressure, t0$5 == null ? this.pressure : t0$5), pressureMin: (t0$6 = pressureMin, t0$6 == null ? this.pressureMin : t0$6), pressureMax: (t0$7 = pressureMax, t0$7 == null ? this.pressureMax : t0$7), distanceMax: (t0$8 = distanceMax, t0$8 == null ? this.distanceMax : t0$8), size: (t0$9 = size, t0$9 == null ? this.size : t0$9), radiusMajor: (t0$10 = radiusMajor, t0$10 == null ? this.radiusMajor : t0$10), radiusMinor: (t0$11 = radiusMinor, t0$11 == null ? this.radiusMinor : t0$11), radiusMin: (t0$12 = radiusMin, t0$12 == null ? this.radiusMin : t0$12), radiusMax: (t0$13 = radiusMax, t0$13 == null ? this.radiusMax : t0$13), orientation: (t0$14 = orientation, t0$14 == null ? this.orientation : t0$14), tilt: (t0$15 = tilt, t0$15 == null ? this.tilt : t0$15), embedderId: (t0$16 = embedderId, t0$16 == null ? this.embedderId : t0$16)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerDownEvent);
  dart.addTypeCaches(events._CopyPointerDownEvent);
  events._CopyPointerDownEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerDownEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerDownEvent.__proto__),
    copyWith: dart.fnType(events.PointerDownEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerDownEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$3 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$3.new = function(opts) {
    PointerEvent__PointerEventDescription$36$3.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$3.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$3, events._PointerEventDescription);
  const PointerEvent__CopyPointerDownEvent$36 = class PointerEvent__CopyPointerDownEvent extends PointerEvent__PointerEventDescription$36$3 {};
  (PointerEvent__CopyPointerDownEvent$36.new = function(opts) {
    PointerEvent__CopyPointerDownEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerDownEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerDownEvent$36, events._CopyPointerDownEvent);
  events.PointerDownEvent = class PointerDownEvent extends PointerEvent__CopyPointerDownEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerDownEvent.new((t0 = T.PointerDownEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerDownEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerDownEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerDownEvent.prototype;
  dart.addTypeTests(events.PointerDownEvent);
  dart.addTypeCaches(events.PointerDownEvent);
  dart.setMethodSignature(events.PointerDownEvent, () => ({
    __proto__: dart.getMethods(events.PointerDownEvent.__proto__),
    transformed: dart.fnType(events.PointerDownEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerDownEvent, I[0]);
  var original$5 = dart.privateName(events, "_TransformedPointerDownEvent.original");
  var transform$5 = dart.privateName(events, "_TransformedPointerDownEvent.transform");
  const _TransformedPointerEvent__CopyPointerDownEvent$36 = class _TransformedPointerEvent__CopyPointerDownEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerDownEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerDownEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerDownEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerDownEvent$36, events._CopyPointerDownEvent);
  events._TransformedPointerDownEvent = class _TransformedPointerDownEvent extends _TransformedPointerEvent__CopyPointerDownEvent$36 {
    get original() {
      return this[original$5];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$5];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerDownEvent.new = function(original, transform) {
    this[original$5] = original;
    this[transform$5] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1557, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1557, 40, "transform != null");
    events._TransformedPointerDownEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerDownEvent.prototype;
  dart.addTypeTests(events._TransformedPointerDownEvent);
  dart.addTypeCaches(events._TransformedPointerDownEvent);
  events._TransformedPointerDownEvent[dart.implements] = () => [events.PointerDownEvent];
  dart.setMethodSignature(events._TransformedPointerDownEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerDownEvent.__proto__),
    transformed: dart.fnType(events.PointerDownEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerDownEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerDownEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerDownEvent.__proto__),
    original: dart.finalFieldType(events.PointerDownEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerMoveEvent = class _CopyPointerMoveEvent extends events.PointerEvent {};
  events._CopyPointerMoveEvent[dart.mixinOn] = PointerEvent => class _CopyPointerMoveEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerMoveEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), pointer: (t0$ = pointer, t0$ == null ? this.pointer : t0$), kind: (t0$0 = kind, t0$0 == null ? this.kind : t0$0), device: (t0$1 = device, t0$1 == null ? this.device : t0$1), position: (t0$2 = position, t0$2 == null ? this.position : t0$2), delta: (t0$3 = delta, t0$3 == null ? this.delta : t0$3), buttons: (t0$4 = buttons, t0$4 == null ? this.buttons : t0$4), obscured: (t0$5 = obscured, t0$5 == null ? this.obscured : t0$5), pressure: (t0$6 = pressure, t0$6 == null ? this.pressure : t0$6), pressureMin: (t0$7 = pressureMin, t0$7 == null ? this.pressureMin : t0$7), pressureMax: (t0$8 = pressureMax, t0$8 == null ? this.pressureMax : t0$8), distanceMax: (t0$9 = distanceMax, t0$9 == null ? this.distanceMax : t0$9), size: (t0$10 = size, t0$10 == null ? this.size : t0$10), radiusMajor: (t0$11 = radiusMajor, t0$11 == null ? this.radiusMajor : t0$11), radiusMinor: (t0$12 = radiusMinor, t0$12 == null ? this.radiusMinor : t0$12), radiusMin: (t0$13 = radiusMin, t0$13 == null ? this.radiusMin : t0$13), radiusMax: (t0$14 = radiusMax, t0$14 == null ? this.radiusMax : t0$14), orientation: (t0$15 = orientation, t0$15 == null ? this.orientation : t0$15), tilt: (t0$16 = tilt, t0$16 == null ? this.tilt : t0$16), synthesized: (t0$17 = synthesized, t0$17 == null ? this.synthesized : t0$17), embedderId: (t0$18 = embedderId, t0$18 == null ? this.embedderId : t0$18)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerMoveEvent);
  dart.addTypeCaches(events._CopyPointerMoveEvent);
  events._CopyPointerMoveEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerMoveEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerMoveEvent.__proto__),
    copyWith: dart.fnType(events.PointerMoveEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerMoveEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$4 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$4.new = function(opts) {
    PointerEvent__PointerEventDescription$36$4.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$4.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$4, events._PointerEventDescription);
  const PointerEvent__CopyPointerMoveEvent$36 = class PointerEvent__CopyPointerMoveEvent extends PointerEvent__PointerEventDescription$36$4 {};
  (PointerEvent__CopyPointerMoveEvent$36.new = function(opts) {
    PointerEvent__CopyPointerMoveEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerMoveEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerMoveEvent$36, events._CopyPointerMoveEvent);
  events.PointerMoveEvent = class PointerMoveEvent extends PointerEvent__CopyPointerMoveEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerMoveEvent.new((t0 = T.PointerMoveEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerMoveEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let delta = opts && 'delta' in opts ? opts.delta : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerMoveEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, delta: delta, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, platformData: platformData, synthesized: synthesized, embedderId: embedderId});
    ;
  }).prototype = events.PointerMoveEvent.prototype;
  dart.addTypeTests(events.PointerMoveEvent);
  dart.addTypeCaches(events.PointerMoveEvent);
  dart.setMethodSignature(events.PointerMoveEvent, () => ({
    __proto__: dart.getMethods(events.PointerMoveEvent.__proto__),
    transformed: dart.fnType(events.PointerMoveEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerMoveEvent, I[0]);
  var original$6 = dart.privateName(events, "_TransformedPointerMoveEvent.original");
  var transform$6 = dart.privateName(events, "_TransformedPointerMoveEvent.transform");
  const _TransformedPointerEvent__CopyPointerMoveEvent$36 = class _TransformedPointerEvent__CopyPointerMoveEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerMoveEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerMoveEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerMoveEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerMoveEvent$36, events._CopyPointerMoveEvent);
  events._TransformedPointerMoveEvent = class _TransformedPointerMoveEvent extends _TransformedPointerEvent__CopyPointerMoveEvent$36 {
    get original() {
      return this[original$6];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$6];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerMoveEvent.new = function(original, transform) {
    this[original$6] = original;
    this[transform$6] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1696, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1696, 40, "transform != null");
    events._TransformedPointerMoveEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerMoveEvent.prototype;
  dart.addTypeTests(events._TransformedPointerMoveEvent);
  dart.addTypeCaches(events._TransformedPointerMoveEvent);
  events._TransformedPointerMoveEvent[dart.implements] = () => [events.PointerMoveEvent];
  dart.setMethodSignature(events._TransformedPointerMoveEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerMoveEvent.__proto__),
    transformed: dart.fnType(events.PointerMoveEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerMoveEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerMoveEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerMoveEvent.__proto__),
    original: dart.finalFieldType(events.PointerMoveEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerUpEvent = class _CopyPointerUpEvent extends events.PointerEvent {};
  events._CopyPointerUpEvent[dart.mixinOn] = PointerEvent => class _CopyPointerUpEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerUpEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), pointer: (t0$ = pointer, t0$ == null ? this.pointer : t0$), kind: (t0$0 = kind, t0$0 == null ? this.kind : t0$0), device: (t0$1 = device, t0$1 == null ? this.device : t0$1), position: (t0$2 = position, t0$2 == null ? this.position : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressure: (t0$5 = pressure, t0$5 == null ? this.pressure : t0$5), pressureMin: (t0$6 = pressureMin, t0$6 == null ? this.pressureMin : t0$6), pressureMax: (t0$7 = pressureMax, t0$7 == null ? this.pressureMax : t0$7), distance: (t0$8 = distance, t0$8 == null ? this.distance : t0$8), distanceMax: (t0$9 = distanceMax, t0$9 == null ? this.distanceMax : t0$9), size: (t0$10 = size, t0$10 == null ? this.size : t0$10), radiusMajor: (t0$11 = radiusMajor, t0$11 == null ? this.radiusMajor : t0$11), radiusMinor: (t0$12 = radiusMinor, t0$12 == null ? this.radiusMinor : t0$12), radiusMin: (t0$13 = radiusMin, t0$13 == null ? this.radiusMin : t0$13), radiusMax: (t0$14 = radiusMax, t0$14 == null ? this.radiusMax : t0$14), orientation: (t0$15 = orientation, t0$15 == null ? this.orientation : t0$15), tilt: (t0$16 = tilt, t0$16 == null ? this.tilt : t0$16), embedderId: (t0$17 = embedderId, t0$17 == null ? this.embedderId : t0$17)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerUpEvent);
  dart.addTypeCaches(events._CopyPointerUpEvent);
  events._CopyPointerUpEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerUpEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerUpEvent.__proto__),
    copyWith: dart.fnType(events.PointerUpEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), localPosition: dart.nullable(ui.Offset), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerUpEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$5 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$5.new = function(opts) {
    PointerEvent__PointerEventDescription$36$5.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$5.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$5, events._PointerEventDescription);
  const PointerEvent__CopyPointerUpEvent$36 = class PointerEvent__CopyPointerUpEvent extends PointerEvent__PointerEventDescription$36$5 {};
  (PointerEvent__CopyPointerUpEvent$36.new = function(opts) {
    PointerEvent__CopyPointerUpEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerUpEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerUpEvent$36, events._CopyPointerUpEvent);
  events.PointerUpEvent = class PointerUpEvent extends PointerEvent__CopyPointerUpEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerUpEvent.new((t0 = T.PointerUpEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerUpEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerUpEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: false, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerUpEvent.prototype;
  dart.addTypeTests(events.PointerUpEvent);
  dart.addTypeCaches(events.PointerUpEvent);
  dart.setMethodSignature(events.PointerUpEvent, () => ({
    __proto__: dart.getMethods(events.PointerUpEvent.__proto__),
    transformed: dart.fnType(events.PointerUpEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerUpEvent, I[0]);
  var original$7 = dart.privateName(events, "_TransformedPointerUpEvent.original");
  var transform$7 = dart.privateName(events, "_TransformedPointerUpEvent.transform");
  const _TransformedPointerEvent__CopyPointerUpEvent$36 = class _TransformedPointerEvent__CopyPointerUpEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerUpEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerUpEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerUpEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerUpEvent$36, events._CopyPointerUpEvent);
  events._TransformedPointerUpEvent = class _TransformedPointerUpEvent extends _TransformedPointerEvent__CopyPointerUpEvent$36 {
    get original() {
      return this[original$7];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$7];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerUpEvent.new = function(original, transform) {
    this[original$7] = original;
    this[transform$7] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1828, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1828, 40, "transform != null");
    events._TransformedPointerUpEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerUpEvent.prototype;
  dart.addTypeTests(events._TransformedPointerUpEvent);
  dart.addTypeCaches(events._TransformedPointerUpEvent);
  events._TransformedPointerUpEvent[dart.implements] = () => [events.PointerUpEvent];
  dart.setMethodSignature(events._TransformedPointerUpEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerUpEvent.__proto__),
    transformed: dart.fnType(events.PointerUpEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerUpEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerUpEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerUpEvent.__proto__),
    original: dart.finalFieldType(events.PointerUpEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events.PointerSignalEvent = class PointerSignalEvent extends events.PointerEvent {};
  (events.PointerSignalEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[3] || CT.C3;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerSignalEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, embedderId: embedderId});
    ;
  }).prototype = events.PointerSignalEvent.prototype;
  dart.addTypeTests(events.PointerSignalEvent);
  dart.addTypeCaches(events.PointerSignalEvent);
  dart.setLibraryUri(events.PointerSignalEvent, I[0]);
  events._CopyPointerScrollEvent = class _CopyPointerScrollEvent extends events.PointerEvent {};
  events._CopyPointerScrollEvent[dart.mixinOn] = PointerEvent => class _CopyPointerScrollEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerScrollEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), kind: (t0$ = kind, t0$ == null ? this.kind : t0$), device: (t0$0 = device, t0$0 == null ? this.device : t0$0), position: (t0$1 = position, t0$1 == null ? this.position : t0$1), scrollDelta: this.scrollDelta, embedderId: (t0$2 = embedderId, t0$2 == null ? this.embedderId : t0$2)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerScrollEvent);
  dart.addTypeCaches(events._CopyPointerScrollEvent);
  events._CopyPointerScrollEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerScrollEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerScrollEvent.__proto__),
    copyWith: dart.fnType(events.PointerScrollEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerScrollEvent, I[0]);
  var scrollDelta$ = dart.privateName(events, "PointerScrollEvent.scrollDelta");
  const PointerSignalEvent__PointerEventDescription$36 = class PointerSignalEvent__PointerEventDescription extends events.PointerSignalEvent {};
  (PointerSignalEvent__PointerEventDescription$36.new = function(opts) {
    PointerSignalEvent__PointerEventDescription$36.__proto__.new.call(this, opts);
  }).prototype = PointerSignalEvent__PointerEventDescription$36.prototype;
  dart.applyMixin(PointerSignalEvent__PointerEventDescription$36, events._PointerEventDescription);
  const PointerSignalEvent__CopyPointerScrollEvent$36 = class PointerSignalEvent__CopyPointerScrollEvent extends PointerSignalEvent__PointerEventDescription$36 {};
  (PointerSignalEvent__CopyPointerScrollEvent$36.new = function(opts) {
    PointerSignalEvent__CopyPointerScrollEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerSignalEvent__CopyPointerScrollEvent$36.prototype;
  dart.applyMixin(PointerSignalEvent__CopyPointerScrollEvent$36, events._CopyPointerScrollEvent);
  events.PointerScrollEvent = class PointerScrollEvent extends PointerSignalEvent__CopyPointerScrollEvent$36 {
    get scrollDelta() {
      return this[scrollDelta$];
    }
    set scrollDelta(value) {
      super.scrollDelta = value;
    }
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerScrollEvent.new((t0 = T.PointerScrollEventN().as(this.original), t0 == null ? this : t0), transform);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (events.PointerScrollEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let kind = opts && 'kind' in opts ? opts.kind : C[3] || CT.C3;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let scrollDelta = opts && 'scrollDelta' in opts ? opts.scrollDelta : C[2] || CT.C2;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    this[scrollDelta$] = scrollDelta;
    if (!(timeStamp !== null)) dart.assertFailed(null, I[1], 1934, 15, "timeStamp != null");
    if (!(kind !== null)) dart.assertFailed(null, I[1], 1935, 15, "kind != null");
    if (!(device !== null)) dart.assertFailed(null, I[1], 1936, 15, "device != null");
    if (!(position !== null)) dart.assertFailed(null, I[1], 1937, 15, "position != null");
    if (!(scrollDelta !== null)) dart.assertFailed(null, I[1], 1938, 15, "scrollDelta != null");
    events.PointerScrollEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, embedderId: embedderId});
    ;
  }).prototype = events.PointerScrollEvent.prototype;
  dart.addTypeTests(events.PointerScrollEvent);
  dart.addTypeCaches(events.PointerScrollEvent);
  dart.setMethodSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getMethods(events.PointerScrollEvent.__proto__),
    transformed: dart.fnType(events.PointerScrollEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerScrollEvent, I[0]);
  dart.setFieldSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getFields(events.PointerScrollEvent.__proto__),
    scrollDelta: dart.finalFieldType(ui.Offset)
  }));
  var original$8 = dart.privateName(events, "_TransformedPointerScrollEvent.original");
  var transform$8 = dart.privateName(events, "_TransformedPointerScrollEvent.transform");
  const _TransformedPointerEvent__CopyPointerScrollEvent$36 = class _TransformedPointerEvent__CopyPointerScrollEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerScrollEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerScrollEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerScrollEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerScrollEvent$36, events._CopyPointerScrollEvent);
  events._TransformedPointerScrollEvent = class _TransformedPointerScrollEvent extends _TransformedPointerEvent__CopyPointerScrollEvent$36 {
    get original() {
      return this[original$8];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$8];
    }
    set transform(value) {
      super.transform = value;
    }
    get scrollDelta() {
      return this.original.scrollDelta;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (events._TransformedPointerScrollEvent.new = function(original, transform) {
    this[original$8] = original;
    this[transform$8] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 1967, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 1967, 40, "transform != null");
    events._TransformedPointerScrollEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerScrollEvent.prototype;
  dart.addTypeTests(events._TransformedPointerScrollEvent);
  dart.addTypeCaches(events._TransformedPointerScrollEvent);
  events._TransformedPointerScrollEvent[dart.implements] = () => [events.PointerScrollEvent];
  dart.setMethodSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerScrollEvent.__proto__),
    transformed: dart.fnType(events.PointerScrollEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setGetterSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getGetters(events._TransformedPointerScrollEvent.__proto__),
    scrollDelta: ui.Offset
  }));
  dart.setLibraryUri(events._TransformedPointerScrollEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerScrollEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerScrollEvent.__proto__),
    original: dart.finalFieldType(events.PointerScrollEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events._CopyPointerCancelEvent = class _CopyPointerCancelEvent extends events.PointerEvent {};
  events._CopyPointerCancelEvent[dart.mixinOn] = PointerEvent => class _CopyPointerCancelEvent extends PointerEvent {
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16;
      let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : null;
      let pointer = opts && 'pointer' in opts ? opts.pointer : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      let device = opts && 'device' in opts ? opts.device : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let buttons = opts && 'buttons' in opts ? opts.buttons : null;
      let obscured = opts && 'obscured' in opts ? opts.obscured : null;
      let pressure = opts && 'pressure' in opts ? opts.pressure : null;
      let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : null;
      let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : null;
      let distance = opts && 'distance' in opts ? opts.distance : null;
      let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : null;
      let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : null;
      let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : null;
      let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let tilt = opts && 'tilt' in opts ? opts.tilt : null;
      let synthesized = opts && 'synthesized' in opts ? opts.synthesized : null;
      let embedderId = opts && 'embedderId' in opts ? opts.embedderId : null;
      return new events.PointerCancelEvent.new({timeStamp: (t0 = timeStamp, t0 == null ? this.timeStamp : t0), pointer: (t0$ = pointer, t0$ == null ? this.pointer : t0$), kind: (t0$0 = kind, t0$0 == null ? this.kind : t0$0), device: (t0$1 = device, t0$1 == null ? this.device : t0$1), position: (t0$2 = position, t0$2 == null ? this.position : t0$2), buttons: (t0$3 = buttons, t0$3 == null ? this.buttons : t0$3), obscured: (t0$4 = obscured, t0$4 == null ? this.obscured : t0$4), pressureMin: (t0$5 = pressureMin, t0$5 == null ? this.pressureMin : t0$5), pressureMax: (t0$6 = pressureMax, t0$6 == null ? this.pressureMax : t0$6), distance: (t0$7 = distance, t0$7 == null ? this.distance : t0$7), distanceMax: (t0$8 = distanceMax, t0$8 == null ? this.distanceMax : t0$8), size: (t0$9 = size, t0$9 == null ? this.size : t0$9), radiusMajor: (t0$10 = radiusMajor, t0$10 == null ? this.radiusMajor : t0$10), radiusMinor: (t0$11 = radiusMinor, t0$11 == null ? this.radiusMinor : t0$11), radiusMin: (t0$12 = radiusMin, t0$12 == null ? this.radiusMin : t0$12), radiusMax: (t0$13 = radiusMax, t0$13 == null ? this.radiusMax : t0$13), orientation: (t0$14 = orientation, t0$14 == null ? this.orientation : t0$14), tilt: (t0$15 = tilt, t0$15 == null ? this.tilt : t0$15), embedderId: (t0$16 = embedderId, t0$16 == null ? this.embedderId : t0$16)}).transformed(this.transform);
    }
  };
  dart.addTypeTests(events._CopyPointerCancelEvent);
  dart.addTypeCaches(events._CopyPointerCancelEvent);
  events._CopyPointerCancelEvent[dart.implements] = () => [events.PointerEvent];
  dart.setMethodSignature(events._CopyPointerCancelEvent, () => ({
    __proto__: dart.getMethods(events._CopyPointerCancelEvent.__proto__),
    copyWith: dart.fnType(events.PointerCancelEvent, [], {buttons: dart.nullable(core.int), delta: dart.nullable(ui.Offset), device: dart.nullable(core.int), distance: dart.nullable(core.double), distanceMax: dart.nullable(core.double), embedderId: dart.nullable(core.int), kind: dart.nullable(ui.PointerDeviceKind), obscured: dart.nullable(core.bool), orientation: dart.nullable(core.double), pointer: dart.nullable(core.int), position: dart.nullable(ui.Offset), pressure: dart.nullable(core.double), pressureMax: dart.nullable(core.double), pressureMin: dart.nullable(core.double), radiusMajor: dart.nullable(core.double), radiusMax: dart.nullable(core.double), radiusMin: dart.nullable(core.double), radiusMinor: dart.nullable(core.double), size: dart.nullable(core.double), synthesized: dart.nullable(core.bool), tilt: dart.nullable(core.double), timeStamp: dart.nullable(core.Duration)}, {})
  }));
  dart.setLibraryUri(events._CopyPointerCancelEvent, I[0]);
  const PointerEvent__PointerEventDescription$36$6 = class PointerEvent__PointerEventDescription extends events.PointerEvent {};
  (PointerEvent__PointerEventDescription$36$6.new = function(opts) {
    PointerEvent__PointerEventDescription$36$6.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__PointerEventDescription$36$6.prototype;
  dart.applyMixin(PointerEvent__PointerEventDescription$36$6, events._PointerEventDescription);
  const PointerEvent__CopyPointerCancelEvent$36 = class PointerEvent__CopyPointerCancelEvent extends PointerEvent__PointerEventDescription$36$6 {};
  (PointerEvent__CopyPointerCancelEvent$36.new = function(opts) {
    PointerEvent__CopyPointerCancelEvent$36.__proto__.new.call(this, opts);
  }).prototype = PointerEvent__CopyPointerCancelEvent$36.prototype;
  dart.applyMixin(PointerEvent__CopyPointerCancelEvent$36, events._CopyPointerCancelEvent);
  events.PointerCancelEvent = class PointerCancelEvent extends PointerEvent__CopyPointerCancelEvent$36 {
    transformed(transform) {
      let t0;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events._TransformedPointerCancelEvent.new((t0 = T.PointerCancelEventN().as(this.original), t0 == null ? this : t0), transform);
    }
  };
  (events.PointerCancelEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C[0] || CT.C0;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C[1] || CT.C1;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C[2] || CT.C2;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let embedderId = opts && 'embedderId' in opts ? opts.embedderId : 0;
    events.PointerCancelEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, embedderId: embedderId});
    ;
  }).prototype = events.PointerCancelEvent.prototype;
  dart.addTypeTests(events.PointerCancelEvent);
  dart.addTypeCaches(events.PointerCancelEvent);
  dart.setMethodSignature(events.PointerCancelEvent, () => ({
    __proto__: dart.getMethods(events.PointerCancelEvent.__proto__),
    transformed: dart.fnType(events.PointerCancelEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events.PointerCancelEvent, I[0]);
  var original$9 = dart.privateName(events, "_TransformedPointerCancelEvent.original");
  var transform$9 = dart.privateName(events, "_TransformedPointerCancelEvent.transform");
  const _TransformedPointerEvent__CopyPointerCancelEvent$36 = class _TransformedPointerEvent__CopyPointerCancelEvent extends events._TransformedPointerEvent {};
  (_TransformedPointerEvent__CopyPointerCancelEvent$36.new = function() {
    _TransformedPointerEvent__CopyPointerCancelEvent$36.__proto__.new.call(this);
  }).prototype = _TransformedPointerEvent__CopyPointerCancelEvent$36.prototype;
  dart.applyMixin(_TransformedPointerEvent__CopyPointerCancelEvent$36, events._CopyPointerCancelEvent);
  events._TransformedPointerCancelEvent = class _TransformedPointerCancelEvent extends _TransformedPointerEvent__CopyPointerCancelEvent$36 {
    get original() {
      return this[original$9];
    }
    set original(value) {
      super.original = value;
    }
    get transform() {
      return this[transform$9];
    }
    set transform(value) {
      super.transform = value;
    }
    transformed(transform) {
      return this.original.transformed(transform);
    }
  };
  (events._TransformedPointerCancelEvent.new = function(original, transform) {
    this[original$9] = original;
    this[transform$9] = transform;
    if (!(original !== null)) dart.assertFailed(null, I[1], 2142, 14, "original != null");
    if (!(transform !== null)) dart.assertFailed(null, I[1], 2142, 40, "transform != null");
    events._TransformedPointerCancelEvent.__proto__.new.call(this);
    ;
  }).prototype = events._TransformedPointerCancelEvent.prototype;
  dart.addTypeTests(events._TransformedPointerCancelEvent);
  dart.addTypeCaches(events._TransformedPointerCancelEvent);
  events._TransformedPointerCancelEvent[dart.implements] = () => [events.PointerCancelEvent];
  dart.setMethodSignature(events._TransformedPointerCancelEvent, () => ({
    __proto__: dart.getMethods(events._TransformedPointerCancelEvent.__proto__),
    transformed: dart.fnType(events.PointerCancelEvent, [dart.nullable(vector_math_64.Matrix4)])
  }));
  dart.setLibraryUri(events._TransformedPointerCancelEvent, I[0]);
  dart.setFieldSignature(events._TransformedPointerCancelEvent, () => ({
    __proto__: dart.getFields(events._TransformedPointerCancelEvent.__proto__),
    original: dart.finalFieldType(events.PointerCancelEvent),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  events.nthMouseButton = function nthMouseButton(number) {
    return ((1)[$leftShift](number - 1) & -1) >>> 0;
  };
  events.nthStylusButton = function nthStylusButton(number) {
    return ((2)[$leftShift](number - 1) & -1) >>> 0;
  };
  events.smallestButton = function smallestButton(buttons) {
    return (buttons & -buttons) >>> 0;
  };
  events.isSingleButton = function isSingleButton(buttons) {
    return buttons !== 0 && events.smallestButton(buttons) === buttons;
  };
  events.computeHitSlop = function computeHitSlop(kind) {
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 1;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 18;
      }
    }
  };
  events.computePanSlop = function computePanSlop(kind) {
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 2;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 36;
      }
    }
  };
  events.computeScaleSlop = function computeScaleSlop(kind) {
    switch (kind) {
      case C[3] || CT.C3:
      {
        return 1;
      }
      case C[4] || CT.C4:
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[1] || CT.C1:
      {
        return 18;
      }
    }
  };
  dart.defineLazy(events, {
    /*events.kPrimaryButton*/get kPrimaryButton() {
      return 1;
    },
    /*events.kSecondaryButton*/get kSecondaryButton() {
      return 2;
    },
    /*events.kPrimaryMouseButton*/get kPrimaryMouseButton() {
      return 1;
    },
    /*events.kSecondaryMouseButton*/get kSecondaryMouseButton() {
      return 2;
    },
    /*events.kStylusContact*/get kStylusContact() {
      return 1;
    },
    /*events.kPrimaryStylusButton*/get kPrimaryStylusButton() {
      return 2;
    },
    /*events.kTertiaryButton*/get kTertiaryButton() {
      return 4;
    },
    /*events.kMiddleMouseButton*/get kMiddleMouseButton() {
      return 4;
    },
    /*events.kSecondaryStylusButton*/get kSecondaryStylusButton() {
      return 4;
    },
    /*events.kBackMouseButton*/get kBackMouseButton() {
      return 8;
    },
    /*events.kForwardMouseButton*/get kForwardMouseButton() {
      return 16;
    },
    /*events.kTouchContact*/get kTouchContact() {
      return 1;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/gestures/events.dart", {
    "package:flutter/src/gestures/events.dart": events
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["events.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/gestures/events.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__events: events
  };
}));

//# sourceMappingURL=events.dart.lib.js.map
>>>>>>> f328dd0bb65c1607d89f0ba7207434a99e478358
